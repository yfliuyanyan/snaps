apiVersion: v1
data:
  support-bundle-spec: 
kind: Secret
metadata:
  creationTimestamp: "2023-05-09T09:24:49Z"
  labels:
    kots.io/backup: velero
    kots.io/kotsadm: "true"
    troubleshoot.io/kind: support-bundle
  name: kotsadm-gitpod-supportbundle
  namespace: gitpod
  resourceVersion: "7548"
  uid: a0bcee10-e701-405e-bc1b-3661365de668
type: Opaque

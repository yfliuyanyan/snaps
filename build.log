leeway build components/blobserve:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib               [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/registry-facade-api/go:lib  [90m(version 11d9730b48b27fad322e28b6a16b495e98e43527)[0m
[33mðŸ”§  build[0m           components/blobserve:app               [90m(version f11e41a411b6300ae7a8f6b5545f0e92bf7a356a)[0m
[33mðŸ”§  build[0m           components/blobserve:docker            [90m(version 8bae6ab6b8841284f019d2469613c7b8254477d7)[0m
[33mðŸ”§  build[0m           components/registry-facade:lib         [90m(version f17d2b5ceb0629422c004f66a9e5d290873fc317)[0m

[90m[components/registry-facade:lib] [0m[33mbuild started[0m [0;90m(version f17d2b5ceb0629422c004f66a9e5d290873fc317)[0m
[90m[components/registry-facade:lib] [0m# github.com/lucas-clemente/quic-go/internal/qtls
[90m[components/registry-facade:lib] [0m/root/go/pkg/mod/github.com/lucas-clemente/quic-go@v0.29.1/internal/qtls/go120.go:5:13: cannot use "The version of quic-go you're using can't be built on Go 1.20 yet. For more details, please see https://github.com/lucas-clemente/quic-go/wiki/quic-go-and-Go-versions." (untyped string constant "The version of quic-go you're using can't be built on Go 1.20 yet. F...) as int value in variable declaration
[90m[components/registry-facade:lib] [0mFAIL	github.com/gitpod-io/gitpod/registry-facade/pkg/registry [build failed]
[90m[components/registry-facade:lib] [0m?   	github.com/gitpod-io/gitpod/registry-facade/pkg/registry/mock	[no test files]
[90m[components/registry-facade:lib] [0mFAIL
[90m[components/registry-facade:lib] [0m[0;31mpackage build failed[0m
[90m[components/registry-facade:lib] [0m[1;37mReason:[0m exit status 1
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:14:25Z" level=fatal msg="build failed"
leeway build components/content-service:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib               [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/content-service-api/go:lib  [90m(version 96c22b2ddc7509c580fb952baff56c3a8bfd632d)[0m
[32mðŸ“¦  cached locally[0m  components/content-service:app         [90m(version e36b3a19d8d8ea53d07cf14099cf575b19f2e02e)[0m
[32mðŸ“¦  cached locally[0m  components/content-service:docker      [90m(version 9a708f9aa03580ef49b725161ac328315f3d6e22)[0m


[0;32mbuild succeded[0m
leeway build components/dashboard:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/dashboard:app                  [90m(version eb31b40fcdeadcd61c683f0c1c8d1544f130f10a)[0m
[32mðŸ“¦  cached locally[0m  components/dashboard:docker               [90m(version c0cfe5394acab7d331266d61e2a68a0a2e29f850)[0m
[32mðŸ“¦  cached locally[0m  components/dashboard:static               [90m(version 2c1a15581cfbc93dedbf573fe503e13c4dcc4312)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-protocol:gitpod-schema  [90m(version 3832e8872d751eca5bd2028c5a907c6b266c75c3)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-protocol:lib            [90m(version 6f50f84f6d574c1dae5f44fabf7fd3a6af9537d1)[0m
[32mðŸ“¦  cached locally[0m  components/public-api/typescript:lib      [90m(version 7a7d860801660f8e249d23ef7840745c85733143)[0m


[0;32mbuild succeded[0m
leeway build components/docker-up:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib              [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[33mðŸ”§  build[0m           components/docker-up:app              [90m(version 493e60850896b3e6082d28e4c5c5584be640092f)[0m
[33mðŸ”§  build[0m           components/docker-up:bin-docker-up    [90m(version 80139dcb1af791d0b67a4c33c44e489d0f04bc2b)[0m
[33mðŸ”§  build[0m           components/docker-up:bin-runc-facade  [90m(version 619da1b673d7109d9c7adb02a3adac0fae3a0062)[0m
[33mðŸ”§  build[0m           components/docker-up:docker           [90m(version 0e6fabe6294ba252696071c8ac5fdee236e70664)[0m

[90m[components/docker-up:bin-docker-up] [0m[33mbuild started[0m [0;90m(version 80139dcb1af791d0b67a4c33c44e489d0f04bc2b)[0m
[90m[components/docker-up:bin-runc-facade] [0m[33mbuild started[0m [0;90m(version 619da1b673d7109d9c7adb02a3adac0fae3a0062)[0m
[90m[components/docker-up:bin-runc-facade] [0mlevel=error msg="[linters_context] typechecking error: pattern ./...: directory prefix . does not contain main module or its selected dependencies"
[90m[components/docker-up:bin-runc-facade] [0m[0;31mpackage build failed[0m
[90m[components/docker-up:bin-runc-facade] [0m[1;37mReason:[0m exit status 7
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:14:28Z" level=fatal msg="build failed"
leeway build components/ee/agent-smith:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib                  [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-protocol:gitpod-schema  [90m(version 3832e8872d751eca5bd2028c5a907c6b266c75c3)[0m
[32mðŸ“¦  cached locally[0m  dev/addlicense:app                        [90m(version c322ba901584f00744aef2db3f81d8d0e5c0512b)[0m
[33mðŸ”§  build[0m           components/ee/agent-smith:app             [90m(version b7653d04cf86ba6dadcc9389f894f634a04ad8f8)[0m
[33mðŸ”§  build[0m           components/ee/agent-smith:docker          [90m(version b34168aa87edb05143f13f5522a8da80e8e8faa6)[0m
[33mðŸ”§  build[0m           components/gitpod-protocol/go:lib         [90m(version a6620338e66a1e62fedeb9ada5bcce1af997b154)[0m

[90m[components/gitpod-protocol/go:lib] [0m[33mbuild started[0m [0;90m(version a6620338e66a1e62fedeb9ada5bcce1af997b154)[0m
[90m[components/gitpod-protocol/go:lib] [0mComponent Path: ./scripts/..
[90m[components/gitpod-protocol/go:lib] [0mConfig Path: ./_deps/components-gitpod-protocol--gitpod-schema/gitpod-schema.json
[90m[components/gitpod-protocol/go:lib] [0mConfig Types Path: ./scripts/../gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m./scripts/generate-config.sh: line 26: schema-generate: command not found
[90m[components/gitpod-protocol/go:lib] [0m./scripts/../gitpod-config-types.go:1:1: expected 'package', found 'EOF'
[90m[components/gitpod-protocol/go:lib] [0mdiff --git a/gitpod-config-types.go b/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0mindex f563ead..cddd97f 100644
[90m[components/gitpod-protocol/go:lib] [0m--- a/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m+++ b/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m@@ -2,224 +2,3 @@
[90m[components/gitpod-protocol/go:lib] [0m // Licensed under the GNU Affero General Public License (AGPL).
[90m[components/gitpod-protocol/go:lib] [0m // See License.AGPL.txt in the project root for license information.
[90m[components/gitpod-protocol/go:lib] [0m 
[90m[components/gitpod-protocol/go:lib] [0m-// Code generated by schema-generate. DO NOT EDIT.
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-package protocol
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// AdditionalRepositoriesItems
[90m[components/gitpod-protocol/go:lib] [0m-type AdditionalRepositoriesItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the repository should be checked out relative to `/workspace`. Defaults to the simple repository name.
[90m[components/gitpod-protocol/go:lib] [0m-	CheckoutLocation string `yaml:"checkoutLocation,omitempty" json:"checkoutLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The url of the git repository to clone. Supports any context URLs.
[90m[components/gitpod-protocol/go:lib] [0m-	Url string `yaml:"url" json:"url"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// CoreDump Configure the default action of certain signals is to cause a process to terminate and produce a core dump file, a file containing an image of the process's memory at the time of termination. Disabled by default.
[90m[components/gitpod-protocol/go:lib] [0m-type CoreDump struct {
[90m[components/gitpod-protocol/go:lib] [0m-	Enabled bool `yaml:"enabled,omitempty" json:"enabled,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// the hard limit acts as a ceiling for the soft limit. For more details please check https://man7.org/linux/man-pages/man2/getrlimit.2.html
[90m[components/gitpod-protocol/go:lib] [0m-	HardLimit float64 `yaml:"hardLimit,omitempty" json:"hardLimit,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// upper limit on the size of the core dump file that will be produced if it receives a core dump signal
[90m[components/gitpod-protocol/go:lib] [0m-	SoftLimit float64 `yaml:"softLimit,omitempty" json:"softLimit,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Env Environment variables to set.
[90m[components/gitpod-protocol/go:lib] [0m-type Env struct {
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Github Configures Gitpod's GitHub app
[90m[components/gitpod-protocol/go:lib] [0m-type Github struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Set to true to enable workspace prebuilds, false to disable them. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuilds interface{} `yaml:"prebuilds,omitempty" json:"prebuilds,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// GitpodConfig
[90m[components/gitpod-protocol/go:lib] [0m-type GitpodConfig struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of additional repositories that are part of this project.
[90m[components/gitpod-protocol/go:lib] [0m-	AdditionalRepositories []*AdditionalRepositoriesItems `yaml:"additionalRepositories,omitempty" json:"additionalRepositories,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the repository should be checked out relative to `/workspace`. Defaults to the simple repository name.
[90m[components/gitpod-protocol/go:lib] [0m-	CheckoutLocation string `yaml:"checkoutLocation,omitempty" json:"checkoutLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure the default action of certain signals is to cause a process to terminate and produce a core dump file, a file containing an image of the process's memory at the time of termination. Disabled by default.
[90m[components/gitpod-protocol/go:lib] [0m-	CoreDump *CoreDump `yaml:"coreDump,omitempty" json:"coreDump,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Experimental network configuration in workspaces (deprecated). Enabled by default
[90m[components/gitpod-protocol/go:lib] [0m-	ExperimentalNetwork bool `yaml:"experimentalNetwork,omitempty" json:"experimentalNetwork,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Git config values should be provided in pairs. E.g. `core.autocrlf: input`. See https://git-scm.com/docs/git-config#_values.
[90m[components/gitpod-protocol/go:lib] [0m-	GitConfig map[string]string `yaml:"gitConfig,omitempty" json:"gitConfig,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configures Gitpod's GitHub app
[90m[components/gitpod-protocol/go:lib] [0m-	Github *Github `yaml:"github,omitempty" json:"github,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The Docker image to run your workspace in.
[90m[components/gitpod-protocol/go:lib] [0m-	Image interface{} `yaml:"image,omitempty" json:"image,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure JetBrains integration
[90m[components/gitpod-protocol/go:lib] [0m-	Jetbrains *Jetbrains `yaml:"jetbrains,omitempty" json:"jetbrains,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The main repository, containing the dev environment configuration.
[90m[components/gitpod-protocol/go:lib] [0m-	MainConfiguration string `yaml:"mainConfiguration,omitempty" json:"mainConfiguration,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of exposed ports.
[90m[components/gitpod-protocol/go:lib] [0m-	Ports []*PortsItems `yaml:"ports,omitempty" json:"ports,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of tasks to run on start. Each task will open a terminal in the IDE.
[90m[components/gitpod-protocol/go:lib] [0m-	Tasks []*TasksItems `yaml:"tasks,omitempty" json:"tasks,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure VS Code integration
[90m[components/gitpod-protocol/go:lib] [0m-	Vscode *Vscode `yaml:"vscode,omitempty" json:"vscode,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the IDE's workspace should be opened. Supports vscode's `*.code-workspace` files.
[90m[components/gitpod-protocol/go:lib] [0m-	WorkspaceLocation string `yaml:"workspaceLocation,omitempty" json:"workspaceLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Image_object The Docker image to run your workspace in.
[90m[components/gitpod-protocol/go:lib] [0m-type Image_object struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Relative path to the context path (optional). Should only be set if you need to copy files into the image.
[90m[components/gitpod-protocol/go:lib] [0m-	Context string `yaml:"context,omitempty" json:"context,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Relative path to a docker file.
[90m[components/gitpod-protocol/go:lib] [0m-	File string `yaml:"file" json:"file"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Jetbrains Configure JetBrains integration
[90m[components/gitpod-protocol/go:lib] [0m-type Jetbrains struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure CLion integration
[90m[components/gitpod-protocol/go:lib] [0m-	Clion *JetbrainsProduct `yaml:"clion,omitempty" json:"clion,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure GoLand integration
[90m[components/gitpod-protocol/go:lib] [0m-	Goland *JetbrainsProduct `yaml:"goland,omitempty" json:"goland,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure IntelliJ integration
[90m[components/gitpod-protocol/go:lib] [0m-	Intellij *JetbrainsProduct `yaml:"intellij,omitempty" json:"intellij,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure PhpStorm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Phpstorm *JetbrainsProduct `yaml:"phpstorm,omitempty" json:"phpstorm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of plugins which should be installed for all JetBrains product for users of this workspace. From the JetBrains Marketplace page, find a page of the required plugin, select 'Versions' tab, click any version to copy pluginId (short name such as org.rust.lang) of the plugin you want to install.
[90m[components/gitpod-protocol/go:lib] [0m-	Plugins []string `yaml:"plugins,omitempty" json:"plugins,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure PyCharm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Pycharm *JetbrainsProduct `yaml:"pycharm,omitempty" json:"pycharm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure Rider integration
[90m[components/gitpod-protocol/go:lib] [0m-	Rider *JetbrainsProduct `yaml:"rider,omitempty" json:"rider,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure RubyMine integration
[90m[components/gitpod-protocol/go:lib] [0m-	Rubymine *JetbrainsProduct `yaml:"rubymine,omitempty" json:"rubymine,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure WebStorm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Webstorm *JetbrainsProduct `yaml:"webstorm,omitempty" json:"webstorm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// JetbrainsProduct
[90m[components/gitpod-protocol/go:lib] [0m-type JetbrainsProduct struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of plugins which should be installed for users of this workspace. From the JetBrains Marketplace page, find a page of the required plugin, select 'Versions' tab, click any version to copy pluginId (short name such as org.rust.lang) of the plugin you want to install.
[90m[components/gitpod-protocol/go:lib] [0m-	Plugins []string `yaml:"plugins,omitempty" json:"plugins,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable warming up of JetBrains backend in prebuilds.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuilds *Prebuilds `yaml:"prebuilds,omitempty" json:"prebuilds,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure JVM options, for instance '-Xmx=4096m'.
[90m[components/gitpod-protocol/go:lib] [0m-	Vmoptions string `yaml:"vmoptions,omitempty" json:"vmoptions,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// PortsItems
[90m[components/gitpod-protocol/go:lib] [0m-type PortsItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A description to identify what is this port used for.
[90m[components/gitpod-protocol/go:lib] [0m-	Description string `yaml:"description,omitempty" json:"description,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Port name.
[90m[components/gitpod-protocol/go:lib] [0m-	Name string `yaml:"name,omitempty" json:"name,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// What to do when a service on this port was detected. 'notify' (default) will show a notification asking the user what to do. 'open-browser' will open a new browser tab. 'open-preview' will open in the preview on the right of the IDE. 'ignore' will do nothing.
[90m[components/gitpod-protocol/go:lib] [0m-	OnOpen string `yaml:"onOpen,omitempty" json:"onOpen,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The port number (e.g. 1337) or range (e.g. 3000-3999) to expose.
[90m[components/gitpod-protocol/go:lib] [0m-	Port interface{} `yaml:"port" json:"port"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The protocol to be used. (deprecated)
[90m[components/gitpod-protocol/go:lib] [0m-	Protocol string `yaml:"protocol,omitempty" json:"protocol,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Whether the port visibility should be private or public. 'private' (default) will only allow users with workspace access to access the port. 'public' will allow everyone with the port URL to access the port.
[90m[components/gitpod-protocol/go:lib] [0m-	Visibility string `yaml:"visibility,omitempty" json:"visibility,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Prebuilds Enable warming up of JetBrains backend in prebuilds.
[90m[components/gitpod-protocol/go:lib] [0m-type Prebuilds struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Whether only stable, latest or both versions should be warmed up. Default is stable only.
[90m[components/gitpod-protocol/go:lib] [0m-	Version string `yaml:"version,omitempty" json:"version,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Prebuilds_object Set to true to enable workspace prebuilds, false to disable them. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-type Prebuilds_object struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a Review in Gitpod badge to pull requests. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	AddBadge bool `yaml:"addBadge,omitempty" json:"addBadge,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a commit check to pull requests. Set to 'fail-on-error' if you want broken prebuilds to block merging. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	AddCheck interface{} `yaml:"addCheck,omitempty" json:"addCheck,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a label to a PR when it's prebuilt. Set to true to use the default label (prebuilt-in-gitpod) or set to a string to use a different label name. This is a beta feature and may be unreliable. Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	AddLabel interface{} `yaml:"addLabel,omitempty" json:"addLabel,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for all branches. Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	Branches bool `yaml:"branches,omitempty" json:"branches,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for the default branch (typically master). Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	Master bool `yaml:"master,omitempty" json:"master,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for pull-requests from the original repo. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	PullRequests bool `yaml:"pullRequests,omitempty" json:"pullRequests,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for pull-requests from any repo (e.g. from forks). Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	PullRequestsFromForks bool `yaml:"pullRequestsFromForks,omitempty" json:"pullRequestsFromForks,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// TasksItems
[90m[components/gitpod-protocol/go:lib] [0m-type TasksItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run before `init` and the main `command`. This command is executed on every start and is expected to terminate. If it fails, the following commands will not be executed.
[90m[components/gitpod-protocol/go:lib] [0m-	Before string `yaml:"before,omitempty" json:"before,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The main shell command to run after `before` and `init`. This command is executed last on every start and doesn't have to terminate.
[90m[components/gitpod-protocol/go:lib] [0m-	Command string `yaml:"command,omitempty" json:"command,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Environment variables to set.
[90m[components/gitpod-protocol/go:lib] [0m-	Env *Env `yaml:"env,omitempty" json:"env,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run between `before` and the main `command`. This command is executed only on after initializing a workspace with a fresh clone, but not on restarts and snapshots. This command is expected to terminate. If it fails, the `command` property will not be executed.
[90m[components/gitpod-protocol/go:lib] [0m-	Init string `yaml:"init,omitempty" json:"init,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Name of the task. Shown on the tab of the opened terminal.
[90m[components/gitpod-protocol/go:lib] [0m-	Name string `yaml:"name,omitempty" json:"name,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The panel/area where to open the terminal. Default is 'bottom' panel.
[90m[components/gitpod-protocol/go:lib] [0m-	OpenIn string `yaml:"openIn,omitempty" json:"openIn,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The opening mode. Default is 'tab-after'.
[90m[components/gitpod-protocol/go:lib] [0m-	OpenMode string `yaml:"openMode,omitempty" json:"openMode,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run after `before`. This command is executed only on during workspace prebuilds. This command is expected to terminate. If it fails, the workspace build fails.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuild string `yaml:"prebuild,omitempty" json:"prebuild,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Vscode Configure VS Code integration
[90m[components/gitpod-protocol/go:lib] [0m-type Vscode struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of extensions which should be installed for users of this workspace. The identifier of an extension is always '${publisher}.${name}'. For example: 'vscode.csharp'.
[90m[components/gitpod-protocol/go:lib] [0m-	Extensions []string `yaml:"extensions,omitempty" json:"extensions,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m[0;31mpackage build failed[0m
[90m[components/gitpod-protocol/go:lib] [0m[1;37mReason:[0m exit status 1
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:14:29Z" level=fatal msg="build failed"
leeway build components/gitpod-db:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/gitpod-db:docker      [90m(version e62cf0250951f21302e748079a00b41fc27e9f76)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-db:migrations  [90m(version 34f80a73a6c06eda6f683bc8c8df805c6cf4c555)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-protocol:lib   [90m(version 6f50f84f6d574c1dae5f44fabf7fd3a6af9537d1)[0m


[0;32mbuild succeded[0m
leeway build components/ide-metrics:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib           [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[33mðŸ”§  build[0m           components/ide-metrics-api/go:lib  [90m(version f9c615104ee778b8a85dacd3ff33c37bf1752d75)[0m
[33mðŸ”§  build[0m           components/ide-metrics:app         [90m(version 6356ea0e96b004497c1a3bb7bca1294f354006d7)[0m
[33mðŸ”§  build[0m           components/ide-metrics:docker      [90m(version d6b8219d927ceaf6c8f8a488ac199e04985da9a2)[0m

[90m[components/ide-metrics-api/go:lib] [0m[33mbuild started[0m [0;90m(version f9c615104ee778b8a85dacd3ff33c37bf1752d75)[0m
[90m[components/ide-metrics-api/go:lib] [0mlevel=error msg="[linters_context] typechecking error: pattern ./...: directory prefix . does not contain main module or its selected dependencies"
[90m[components/ide-metrics-api/go:lib] [0m[0;31mpackage build failed[0m
[90m[components/ide-metrics-api/go:lib] [0m[1;37mReason:[0m exit status 7
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:14:31Z" level=fatal msg="build failed"
leeway build components/ide-proxy:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/gitpod-protocol:gitpod-schema  [90m(version 3832e8872d751eca5bd2028c5a907c6b266c75c3)[0m
[32mðŸ“¦  cached locally[0m  components/supervisor-api/go:lib          [90m(version 6505b1a01e6e7b434713f4944dcab84b18d89b56)[0m
[32mðŸ“¦  cached locally[0m  dev/addlicense:app                        [90m(version c322ba901584f00744aef2db3f81d8d0e5c0512b)[0m
[33mðŸ”§  build[0m           components/gitpod-protocol/go:lib         [90m(version a6620338e66a1e62fedeb9ada5bcce1af997b154)[0m
[33mðŸ”§  build[0m           components/ide-proxy:docker               [90m(version 3e8d9f26362249b43f37c5e22a2846d3b79fd322)[0m
[33mðŸ”§  build[0m           components/local-app-api/go:lib           [90m(version 5869e0fd0dc08075bb1cf8c5868778f9ef9d9447)[0m
[33mðŸ”§  build[0m           components/local-app:app                  [90m(version f3225fa6cfc8420740f0773df30fc382498ccf85)[0m
[33mðŸ”§  build[0m           components/local-app:app-darwin-amd64     [90m(version 6f9be86905ea59fa233972cd3b06cda9350006fe)[0m
[33mðŸ”§  build[0m           components/local-app:app-darwin-arm64     [90m(version 9d877fdfa3128cf531bb3e09957b6a2b307c8aac)[0m
[33mðŸ”§  build[0m           components/local-app:app-linux-amd64      [90m(version a267f5afd7f3eaae12593f36c2e5e8c3c8e0383c)[0m
[33mðŸ”§  build[0m           components/local-app:app-linux-arm64      [90m(version be516234a535a9a5097a57eeebe6edd600e289a8)[0m
[33mðŸ”§  build[0m           components/local-app:app-windows-386      [90m(version f07366130e0ef9b3510e7403dfe9298b40fb13d8)[0m
[33mðŸ”§  build[0m           components/local-app:app-windows-amd64    [90m(version d893b695aecb3b2d0cb28f45d842242715c7bdda)[0m
[33mðŸ”§  build[0m           components/local-app:app-windows-arm64    [90m(version 865e1e61a1f1f3ea518cd14dbdd74ce59680b51d)[0m

[90m[components/gitpod-protocol/go:lib] [0m[33mbuild started[0m [0;90m(version a6620338e66a1e62fedeb9ada5bcce1af997b154)[0m
[90m[components/local-app-api/go:lib] [0m[33mbuild started[0m [0;90m(version 5869e0fd0dc08075bb1cf8c5868778f9ef9d9447)[0m
[90m[components/gitpod-protocol/go:lib] [0mComponent Path: ./scripts/..
[90m[components/gitpod-protocol/go:lib] [0mConfig Path: ./_deps/components-gitpod-protocol--gitpod-schema/gitpod-schema.json
[90m[components/gitpod-protocol/go:lib] [0mConfig Types Path: ./scripts/../gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m./scripts/generate-config.sh: line 26: schema-generate: command not found
[90m[components/gitpod-protocol/go:lib] [0m./scripts/../gitpod-config-types.go:1:1: expected 'package', found 'EOF'
[90m[components/gitpod-protocol/go:lib] [0mdiff --git a/gitpod-config-types.go b/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0mindex f563ead..cddd97f 100644
[90m[components/gitpod-protocol/go:lib] [0m--- a/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m+++ b/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m@@ -2,224 +2,3 @@
[90m[components/gitpod-protocol/go:lib] [0m // Licensed under the GNU Affero General Public License (AGPL).
[90m[components/gitpod-protocol/go:lib] [0m // See License.AGPL.txt in the project root for license information.
[90m[components/gitpod-protocol/go:lib] [0m 
[90m[components/gitpod-protocol/go:lib] [0m-// Code generated by schema-generate. DO NOT EDIT.
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-package protocol
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// AdditionalRepositoriesItems
[90m[components/gitpod-protocol/go:lib] [0m-type AdditionalRepositoriesItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the repository should be checked out relative to `/workspace`. Defaults to the simple repository name.
[90m[components/gitpod-protocol/go:lib] [0m-	CheckoutLocation string `yaml:"checkoutLocation,omitempty" json:"checkoutLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The url of the git repository to clone. Supports any context URLs.
[90m[components/gitpod-protocol/go:lib] [0m-	Url string `yaml:"url" json:"url"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// CoreDump Configure the default action of certain signals is to cause a process to terminate and produce a core dump file, a file containing an image of the process's memory at the time of termination. Disabled by default.
[90m[components/gitpod-protocol/go:lib] [0m-type CoreDump struct {
[90m[components/gitpod-protocol/go:lib] [0m-	Enabled bool `yaml:"enabled,omitempty" json:"enabled,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// the hard limit acts as a ceiling for the soft limit. For more details please check https://man7.org/linux/man-pages/man2/getrlimit.2.html
[90m[components/gitpod-protocol/go:lib] [0m-	HardLimit float64 `yaml:"hardLimit,omitempty" json:"hardLimit,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// upper limit on the size of the core dump file that will be produced if it receives a core dump signal
[90m[components/gitpod-protocol/go:lib] [0m-	SoftLimit float64 `yaml:"softLimit,omitempty" json:"softLimit,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Env Environment variables to set.
[90m[components/gitpod-protocol/go:lib] [0m-type Env struct {
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Github Configures Gitpod's GitHub app
[90m[components/gitpod-protocol/go:lib] [0m-type Github struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Set to true to enable workspace prebuilds, false to disable them. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuilds interface{} `yaml:"prebuilds,omitempty" json:"prebuilds,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// GitpodConfig
[90m[components/gitpod-protocol/go:lib] [0m-type GitpodConfig struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of additional repositories that are part of this project.
[90m[components/gitpod-protocol/go:lib] [0m-	AdditionalRepositories []*AdditionalRepositoriesItems `yaml:"additionalRepositories,omitempty" json:"additionalRepositories,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the repository should be checked out relative to `/workspace`. Defaults to the simple repository name.
[90m[components/gitpod-protocol/go:lib] [0m-	CheckoutLocation string `yaml:"checkoutLocation,omitempty" json:"checkoutLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure the default action of certain signals is to cause a process to terminate and produce a core dump file, a file containing an image of the process's memory at the time of termination. Disabled by default.
[90m[components/gitpod-protocol/go:lib] [0m-	CoreDump *CoreDump `yaml:"coreDump,omitempty" json:"coreDump,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Experimental network configuration in workspaces (deprecated). Enabled by default
[90m[components/gitpod-protocol/go:lib] [0m-	ExperimentalNetwork bool `yaml:"experimentalNetwork,omitempty" json:"experimentalNetwork,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Git config values should be provided in pairs. E.g. `core.autocrlf: input`. See https://git-scm.com/docs/git-config#_values.
[90m[components/gitpod-protocol/go:lib] [0m-	GitConfig map[string]string `yaml:"gitConfig,omitempty" json:"gitConfig,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configures Gitpod's GitHub app
[90m[components/gitpod-protocol/go:lib] [0m-	Github *Github `yaml:"github,omitempty" json:"github,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The Docker image to run your workspace in.
[90m[components/gitpod-protocol/go:lib] [0m-	Image interface{} `yaml:"image,omitempty" json:"image,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure JetBrains integration
[90m[components/gitpod-protocol/go:lib] [0m-	Jetbrains *Jetbrains `yaml:"jetbrains,omitempty" json:"jetbrains,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The main repository, containing the dev environment configuration.
[90m[components/gitpod-protocol/go:lib] [0m-	MainConfiguration string `yaml:"mainConfiguration,omitempty" json:"mainConfiguration,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of exposed ports.
[90m[components/gitpod-protocol/go:lib] [0m-	Ports []*PortsItems `yaml:"ports,omitempty" json:"ports,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of tasks to run on start. Each task will open a terminal in the IDE.
[90m[components/gitpod-protocol/go:lib] [0m-	Tasks []*TasksItems `yaml:"tasks,omitempty" json:"tasks,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure VS Code integration
[90m[components/gitpod-protocol/go:lib] [0m-	Vscode *Vscode `yaml:"vscode,omitempty" json:"vscode,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the IDE's workspace should be opened. Supports vscode's `*.code-workspace` files.
[90m[components/gitpod-protocol/go:lib] [0m-	WorkspaceLocation string `yaml:"workspaceLocation,omitempty" json:"workspaceLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Image_object The Docker image to run your workspace in.
[90m[components/gitpod-protocol/go:lib] [0m-type Image_object struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Relative path to the context path (optional). Should only be set if you need to copy files into the image.
[90m[components/gitpod-protocol/go:lib] [0m-	Context string `yaml:"context,omitempty" json:"context,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Relative path to a docker file.
[90m[components/gitpod-protocol/go:lib] [0m-	File string `yaml:"file" json:"file"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Jetbrains Configure JetBrains integration
[90m[components/gitpod-protocol/go:lib] [0m-type Jetbrains struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure CLion integration
[90m[components/gitpod-protocol/go:lib] [0m-	Clion *JetbrainsProduct `yaml:"clion,omitempty" json:"clion,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure GoLand integration
[90m[components/gitpod-protocol/go:lib] [0m-	Goland *JetbrainsProduct `yaml:"goland,omitempty" json:"goland,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure IntelliJ integration
[90m[components/gitpod-protocol/go:lib] [0m-	Intellij *JetbrainsProduct `yaml:"intellij,omitempty" json:"intellij,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure PhpStorm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Phpstorm *JetbrainsProduct `yaml:"phpstorm,omitempty" json:"phpstorm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of plugins which should be installed for all JetBrains product for users of this workspace. From the JetBrains Marketplace page, find a page of the required plugin, select 'Versions' tab, click any version to copy pluginId (short name such as org.rust.lang) of the plugin you want to install.
[90m[components/gitpod-protocol/go:lib] [0m-	Plugins []string `yaml:"plugins,omitempty" json:"plugins,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure PyCharm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Pycharm *JetbrainsProduct `yaml:"pycharm,omitempty" json:"pycharm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure Rider integration
[90m[components/gitpod-protocol/go:lib] [0m-	Rider *JetbrainsProduct `yaml:"rider,omitempty" json:"rider,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure RubyMine integration
[90m[components/gitpod-protocol/go:lib] [0m-	Rubymine *JetbrainsProduct `yaml:"rubymine,omitempty" json:"rubymine,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure WebStorm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Webstorm *JetbrainsProduct `yaml:"webstorm,omitempty" json:"webstorm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// JetbrainsProduct
[90m[components/gitpod-protocol/go:lib] [0m-type JetbrainsProduct struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of plugins which should be installed for users of this workspace. From the JetBrains Marketplace page, find a page of the required plugin, select 'Versions' tab, click any version to copy pluginId (short name such as org.rust.lang) of the plugin you want to install.
[90m[components/gitpod-protocol/go:lib] [0m-	Plugins []string `yaml:"plugins,omitempty" json:"plugins,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable warming up of JetBrains backend in prebuilds.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuilds *Prebuilds `yaml:"prebuilds,omitempty" json:"prebuilds,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure JVM options, for instance '-Xmx=4096m'.
[90m[components/gitpod-protocol/go:lib] [0m-	Vmoptions string `yaml:"vmoptions,omitempty" json:"vmoptions,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// PortsItems
[90m[components/gitpod-protocol/go:lib] [0m-type PortsItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A description to identify what is this port used for.
[90m[components/gitpod-protocol/go:lib] [0m-	Description string `yaml:"description,omitempty" json:"description,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Port name.
[90m[components/gitpod-protocol/go:lib] [0m-	Name string `yaml:"name,omitempty" json:"name,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// What to do when a service on this port was detected. 'notify' (default) will show a notification asking the user what to do. 'open-browser' will open a new browser tab. 'open-preview' will open in the preview on the right of the IDE. 'ignore' will do nothing.
[90m[components/gitpod-protocol/go:lib] [0m-	OnOpen string `yaml:"onOpen,omitempty" json:"onOpen,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The port number (e.g. 1337) or range (e.g. 3000-3999) to expose.
[90m[components/gitpod-protocol/go:lib] [0m-	Port interface{} `yaml:"port" json:"port"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The protocol to be used. (deprecated)
[90m[components/gitpod-protocol/go:lib] [0m-	Protocol string `yaml:"protocol,omitempty" json:"protocol,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Whether the port visibility should be private or public. 'private' (default) will only allow users with workspace access to access the port. 'public' will allow everyone with the port URL to access the port.
[90m[components/gitpod-protocol/go:lib] [0m-	Visibility string `yaml:"visibility,omitempty" json:"visibility,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Prebuilds Enable warming up of JetBrains backend in prebuilds.
[90m[components/gitpod-protocol/go:lib] [0m-type Prebuilds struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Whether only stable, latest or both versions should be warmed up. Default is stable only.
[90m[components/gitpod-protocol/go:lib] [0m-	Version string `yaml:"version,omitempty" json:"version,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Prebuilds_object Set to true to enable workspace prebuilds, false to disable them. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-type Prebuilds_object struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a Review in Gitpod badge to pull requests. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	AddBadge bool `yaml:"addBadge,omitempty" json:"addBadge,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a commit check to pull requests. Set to 'fail-on-error' if you want broken prebuilds to block merging. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	AddCheck interface{} `yaml:"addCheck,omitempty" json:"addCheck,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a label to a PR when it's prebuilt. Set to true to use the default label (prebuilt-in-gitpod) or set to a string to use a different label name. This is a beta feature and may be unreliable. Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	AddLabel interface{} `yaml:"addLabel,omitempty" json:"addLabel,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for all branches. Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	Branches bool `yaml:"branches,omitempty" json:"branches,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for the default branch (typically master). Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	Master bool `yaml:"master,omitempty" json:"master,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for pull-requests from the original repo. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	PullRequests bool `yaml:"pullRequests,omitempty" json:"pullRequests,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for pull-requests from any repo (e.g. from forks). Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	PullRequestsFromForks bool `yaml:"pullRequestsFromForks,omitempty" json:"pullRequestsFromForks,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// TasksItems
[90m[components/gitpod-protocol/go:lib] [0m-type TasksItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run before `init` and the main `command`. This command is executed on every start and is expected to terminate. If it fails, the following commands will not be executed.
[90m[components/gitpod-protocol/go:lib] [0m-	Before string `yaml:"before,omitempty" json:"before,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The main shell command to run after `before` and `init`. This command is executed last on every start and doesn't have to terminate.
[90m[components/gitpod-protocol/go:lib] [0m-	Command string `yaml:"command,omitempty" json:"command,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Environment variables to set.
[90m[components/gitpod-protocol/go:lib] [0m-	Env *Env `yaml:"env,omitempty" json:"env,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run between `before` and the main `command`. This command is executed only on after initializing a workspace with a fresh clone, but not on restarts and snapshots. This command is expected to terminate. If it fails, the `command` property will not be executed.
[90m[components/gitpod-protocol/go:lib] [0m-	Init string `yaml:"init,omitempty" json:"init,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Name of the task. Shown on the tab of the opened terminal.
[90m[components/gitpod-protocol/go:lib] [0m-	Name string `yaml:"name,omitempty" json:"name,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The panel/area where to open the terminal. Default is 'bottom' panel.
[90m[components/gitpod-protocol/go:lib] [0m-	OpenIn string `yaml:"openIn,omitempty" json:"openIn,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The opening mode. Default is 'tab-after'.
[90m[components/gitpod-protocol/go:lib] [0m-	OpenMode string `yaml:"openMode,omitempty" json:"openMode,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run after `before`. This command is executed only on during workspace prebuilds. This command is expected to terminate. If it fails, the workspace build fails.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuild string `yaml:"prebuild,omitempty" json:"prebuild,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Vscode Configure VS Code integration
[90m[components/gitpod-protocol/go:lib] [0m-type Vscode struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of extensions which should be installed for users of this workspace. The identifier of an extension is always '${publisher}.${name}'. For example: 'vscode.csharp'.
[90m[components/gitpod-protocol/go:lib] [0m-	Extensions []string `yaml:"extensions,omitempty" json:"extensions,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m[0;31mpackage build failed[0m
[90m[components/gitpod-protocol/go:lib] [0m[1;37mReason:[0m exit status 1
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:14:33Z" level=fatal msg="build failed"
leeway build components/ide-service:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib                  [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-protocol:gitpod-schema  [90m(version 3832e8872d751eca5bd2028c5a907c6b266c75c3)[0m
[32mðŸ“¦  cached locally[0m  dev/addlicense:app                        [90m(version c322ba901584f00744aef2db3f81d8d0e5c0512b)[0m
[33mðŸ”§  build[0m           components/gitpod-protocol/go:lib         [90m(version a6620338e66a1e62fedeb9ada5bcce1af997b154)[0m
[33mðŸ”§  build[0m           components/ide-service-api/go:lib         [90m(version 8b60d826bfbec5d2261411b4c1e987e8aaa8cc9c)[0m
[33mðŸ”§  build[0m           components/ide-service:app                [90m(version 91d93c646332bf9b9a70c7b1f5a9ae50a7d5d59e)[0m
[33mðŸ”§  build[0m           components/ide-service:docker             [90m(version 09ba931e54809817b8e3ef99963ecc7193c729c6)[0m

[90m[components/ide-service-api/go:lib] [0m[33mbuild started[0m [0;90m(version 8b60d826bfbec5d2261411b4c1e987e8aaa8cc9c)[0m
[90m[components/gitpod-protocol/go:lib] [0m[33mbuild started[0m [0;90m(version a6620338e66a1e62fedeb9ada5bcce1af997b154)[0m
[90m[components/gitpod-protocol/go:lib] [0mComponent Path: ./scripts/..
[90m[components/gitpod-protocol/go:lib] [0mConfig Path: ./_deps/components-gitpod-protocol--gitpod-schema/gitpod-schema.json
[90m[components/gitpod-protocol/go:lib] [0mConfig Types Path: ./scripts/../gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m./scripts/generate-config.sh: line 26: schema-generate: command not found
[90m[components/gitpod-protocol/go:lib] [0m./scripts/../gitpod-config-types.go:1:1: expected 'package', found 'EOF'
[90m[components/gitpod-protocol/go:lib] [0mdiff --git a/gitpod-config-types.go b/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0mindex f563ead..cddd97f 100644
[90m[components/gitpod-protocol/go:lib] [0m--- a/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m+++ b/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m@@ -2,224 +2,3 @@
[90m[components/gitpod-protocol/go:lib] [0m // Licensed under the GNU Affero General Public License (AGPL).
[90m[components/gitpod-protocol/go:lib] [0m // See License.AGPL.txt in the project root for license information.
[90m[components/gitpod-protocol/go:lib] [0m 
[90m[components/gitpod-protocol/go:lib] [0m-// Code generated by schema-generate. DO NOT EDIT.
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-package protocol
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// AdditionalRepositoriesItems
[90m[components/gitpod-protocol/go:lib] [0m-type AdditionalRepositoriesItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the repository should be checked out relative to `/workspace`. Defaults to the simple repository name.
[90m[components/gitpod-protocol/go:lib] [0m-	CheckoutLocation string `yaml:"checkoutLocation,omitempty" json:"checkoutLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The url of the git repository to clone. Supports any context URLs.
[90m[components/gitpod-protocol/go:lib] [0m-	Url string `yaml:"url" json:"url"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// CoreDump Configure the default action of certain signals is to cause a process to terminate and produce a core dump file, a file containing an image of the process's memory at the time of termination. Disabled by default.
[90m[components/gitpod-protocol/go:lib] [0m-type CoreDump struct {
[90m[components/gitpod-protocol/go:lib] [0m-	Enabled bool `yaml:"enabled,omitempty" json:"enabled,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// the hard limit acts as a ceiling for the soft limit. For more details please check https://man7.org/linux/man-pages/man2/getrlimit.2.html
[90m[components/gitpod-protocol/go:lib] [0m-	HardLimit float64 `yaml:"hardLimit,omitempty" json:"hardLimit,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// upper limit on the size of the core dump file that will be produced if it receives a core dump signal
[90m[components/gitpod-protocol/go:lib] [0m-	SoftLimit float64 `yaml:"softLimit,omitempty" json:"softLimit,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Env Environment variables to set.
[90m[components/gitpod-protocol/go:lib] [0m-type Env struct {
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Github Configures Gitpod's GitHub app
[90m[components/gitpod-protocol/go:lib] [0m-type Github struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Set to true to enable workspace prebuilds, false to disable them. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuilds interface{} `yaml:"prebuilds,omitempty" json:"prebuilds,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// GitpodConfig
[90m[components/gitpod-protocol/go:lib] [0m-type GitpodConfig struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of additional repositories that are part of this project.
[90m[components/gitpod-protocol/go:lib] [0m-	AdditionalRepositories []*AdditionalRepositoriesItems `yaml:"additionalRepositories,omitempty" json:"additionalRepositories,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the repository should be checked out relative to `/workspace`. Defaults to the simple repository name.
[90m[components/gitpod-protocol/go:lib] [0m-	CheckoutLocation string `yaml:"checkoutLocation,omitempty" json:"checkoutLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure the default action of certain signals is to cause a process to terminate and produce a core dump file, a file containing an image of the process's memory at the time of termination. Disabled by default.
[90m[components/gitpod-protocol/go:lib] [0m-	CoreDump *CoreDump `yaml:"coreDump,omitempty" json:"coreDump,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Experimental network configuration in workspaces (deprecated). Enabled by default
[90m[components/gitpod-protocol/go:lib] [0m-	ExperimentalNetwork bool `yaml:"experimentalNetwork,omitempty" json:"experimentalNetwork,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Git config values should be provided in pairs. E.g. `core.autocrlf: input`. See https://git-scm.com/docs/git-config#_values.
[90m[components/gitpod-protocol/go:lib] [0m-	GitConfig map[string]string `yaml:"gitConfig,omitempty" json:"gitConfig,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configures Gitpod's GitHub app
[90m[components/gitpod-protocol/go:lib] [0m-	Github *Github `yaml:"github,omitempty" json:"github,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The Docker image to run your workspace in.
[90m[components/gitpod-protocol/go:lib] [0m-	Image interface{} `yaml:"image,omitempty" json:"image,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure JetBrains integration
[90m[components/gitpod-protocol/go:lib] [0m-	Jetbrains *Jetbrains `yaml:"jetbrains,omitempty" json:"jetbrains,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The main repository, containing the dev environment configuration.
[90m[components/gitpod-protocol/go:lib] [0m-	MainConfiguration string `yaml:"mainConfiguration,omitempty" json:"mainConfiguration,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of exposed ports.
[90m[components/gitpod-protocol/go:lib] [0m-	Ports []*PortsItems `yaml:"ports,omitempty" json:"ports,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of tasks to run on start. Each task will open a terminal in the IDE.
[90m[components/gitpod-protocol/go:lib] [0m-	Tasks []*TasksItems `yaml:"tasks,omitempty" json:"tasks,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure VS Code integration
[90m[components/gitpod-protocol/go:lib] [0m-	Vscode *Vscode `yaml:"vscode,omitempty" json:"vscode,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the IDE's workspace should be opened. Supports vscode's `*.code-workspace` files.
[90m[components/gitpod-protocol/go:lib] [0m-	WorkspaceLocation string `yaml:"workspaceLocation,omitempty" json:"workspaceLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Image_object The Docker image to run your workspace in.
[90m[components/gitpod-protocol/go:lib] [0m-type Image_object struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Relative path to the context path (optional). Should only be set if you need to copy files into the image.
[90m[components/gitpod-protocol/go:lib] [0m-	Context string `yaml:"context,omitempty" json:"context,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Relative path to a docker file.
[90m[components/gitpod-protocol/go:lib] [0m-	File string `yaml:"file" json:"file"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Jetbrains Configure JetBrains integration
[90m[components/gitpod-protocol/go:lib] [0m-type Jetbrains struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure CLion integration
[90m[components/gitpod-protocol/go:lib] [0m-	Clion *JetbrainsProduct `yaml:"clion,omitempty" json:"clion,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure GoLand integration
[90m[components/gitpod-protocol/go:lib] [0m-	Goland *JetbrainsProduct `yaml:"goland,omitempty" json:"goland,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure IntelliJ integration
[90m[components/gitpod-protocol/go:lib] [0m-	Intellij *JetbrainsProduct `yaml:"intellij,omitempty" json:"intellij,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure PhpStorm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Phpstorm *JetbrainsProduct `yaml:"phpstorm,omitempty" json:"phpstorm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of plugins which should be installed for all JetBrains product for users of this workspace. From the JetBrains Marketplace page, find a page of the required plugin, select 'Versions' tab, click any version to copy pluginId (short name such as org.rust.lang) of the plugin you want to install.
[90m[components/gitpod-protocol/go:lib] [0m-	Plugins []string `yaml:"plugins,omitempty" json:"plugins,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure PyCharm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Pycharm *JetbrainsProduct `yaml:"pycharm,omitempty" json:"pycharm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure Rider integration
[90m[components/gitpod-protocol/go:lib] [0m-	Rider *JetbrainsProduct `yaml:"rider,omitempty" json:"rider,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure RubyMine integration
[90m[components/gitpod-protocol/go:lib] [0m-	Rubymine *JetbrainsProduct `yaml:"rubymine,omitempty" json:"rubymine,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure WebStorm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Webstorm *JetbrainsProduct `yaml:"webstorm,omitempty" json:"webstorm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// JetbrainsProduct
[90m[components/gitpod-protocol/go:lib] [0m-type JetbrainsProduct struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of plugins which should be installed for users of this workspace. From the JetBrains Marketplace page, find a page of the required plugin, select 'Versions' tab, click any version to copy pluginId (short name such as org.rust.lang) of the plugin you want to install.
[90m[components/gitpod-protocol/go:lib] [0m-	Plugins []string `yaml:"plugins,omitempty" json:"plugins,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable warming up of JetBrains backend in prebuilds.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuilds *Prebuilds `yaml:"prebuilds,omitempty" json:"prebuilds,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure JVM options, for instance '-Xmx=4096m'.
[90m[components/gitpod-protocol/go:lib] [0m-	Vmoptions string `yaml:"vmoptions,omitempty" json:"vmoptions,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// PortsItems
[90m[components/gitpod-protocol/go:lib] [0m-type PortsItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A description to identify what is this port used for.
[90m[components/gitpod-protocol/go:lib] [0m-	Description string `yaml:"description,omitempty" json:"description,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Port name.
[90m[components/gitpod-protocol/go:lib] [0m-	Name string `yaml:"name,omitempty" json:"name,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// What to do when a service on this port was detected. 'notify' (default) will show a notification asking the user what to do. 'open-browser' will open a new browser tab. 'open-preview' will open in the preview on the right of the IDE. 'ignore' will do nothing.
[90m[components/gitpod-protocol/go:lib] [0m-	OnOpen string `yaml:"onOpen,omitempty" json:"onOpen,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The port number (e.g. 1337) or range (e.g. 3000-3999) to expose.
[90m[components/gitpod-protocol/go:lib] [0m-	Port interface{} `yaml:"port" json:"port"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The protocol to be used. (deprecated)
[90m[components/gitpod-protocol/go:lib] [0m-	Protocol string `yaml:"protocol,omitempty" json:"protocol,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Whether the port visibility should be private or public. 'private' (default) will only allow users with workspace access to access the port. 'public' will allow everyone with the port URL to access the port.
[90m[components/gitpod-protocol/go:lib] [0m-	Visibility string `yaml:"visibility,omitempty" json:"visibility,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Prebuilds Enable warming up of JetBrains backend in prebuilds.
[90m[components/gitpod-protocol/go:lib] [0m-type Prebuilds struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Whether only stable, latest or both versions should be warmed up. Default is stable only.
[90m[components/gitpod-protocol/go:lib] [0m-	Version string `yaml:"version,omitempty" json:"version,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Prebuilds_object Set to true to enable workspace prebuilds, false to disable them. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-type Prebuilds_object struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a Review in Gitpod badge to pull requests. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	AddBadge bool `yaml:"addBadge,omitempty" json:"addBadge,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a commit check to pull requests. Set to 'fail-on-error' if you want broken prebuilds to block merging. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	AddCheck interface{} `yaml:"addCheck,omitempty" json:"addCheck,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a label to a PR when it's prebuilt. Set to true to use the default label (prebuilt-in-gitpod) or set to a string to use a different label name. This is a beta feature and may be unreliable. Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	AddLabel interface{} `yaml:"addLabel,omitempty" json:"addLabel,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for all branches. Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	Branches bool `yaml:"branches,omitempty" json:"branches,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for the default branch (typically master). Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	Master bool `yaml:"master,omitempty" json:"master,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for pull-requests from the original repo. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	PullRequests bool `yaml:"pullRequests,omitempty" json:"pullRequests,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for pull-requests from any repo (e.g. from forks). Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	PullRequestsFromForks bool `yaml:"pullRequestsFromForks,omitempty" json:"pullRequestsFromForks,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// TasksItems
[90m[components/gitpod-protocol/go:lib] [0m-type TasksItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run before `init` and the main `command`. This command is executed on every start and is expected to terminate. If it fails, the following commands will not be executed.
[90m[components/gitpod-protocol/go:lib] [0m-	Before string `yaml:"before,omitempty" json:"before,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The main shell command to run after `before` and `init`. This command is executed last on every start and doesn't have to terminate.
[90m[components/gitpod-protocol/go:lib] [0m-	Command string `yaml:"command,omitempty" json:"command,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Environment variables to set.
[90m[components/gitpod-protocol/go:lib] [0m-	Env *Env `yaml:"env,omitempty" json:"env,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run between `before` and the main `command`. This command is executed only on after initializing a workspace with a fresh clone, but not on restarts and snapshots. This command is expected to terminate. If it fails, the `command` property will not be executed.
[90m[components/gitpod-protocol/go:lib] [0m-	Init string `yaml:"init,omitempty" json:"init,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Name of the task. Shown on the tab of the opened terminal.
[90m[components/gitpod-protocol/go:lib] [0m-	Name string `yaml:"name,omitempty" json:"name,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The panel/area where to open the terminal. Default is 'bottom' panel.
[90m[components/gitpod-protocol/go:lib] [0m-	OpenIn string `yaml:"openIn,omitempty" json:"openIn,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The opening mode. Default is 'tab-after'.
[90m[components/gitpod-protocol/go:lib] [0m-	OpenMode string `yaml:"openMode,omitempty" json:"openMode,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run after `before`. This command is executed only on during workspace prebuilds. This command is expected to terminate. If it fails, the workspace build fails.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuild string `yaml:"prebuild,omitempty" json:"prebuild,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Vscode Configure VS Code integration
[90m[components/gitpod-protocol/go:lib] [0m-type Vscode struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of extensions which should be installed for users of this workspace. The identifier of an extension is always '${publisher}.${name}'. For example: 'vscode.csharp'.
[90m[components/gitpod-protocol/go:lib] [0m-	Extensions []string `yaml:"extensions,omitempty" json:"extensions,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m[0;31mpackage build failed[0m
[90m[components/gitpod-protocol/go:lib] [0m[1;37mReason:[0m exit status 1
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:14:34Z" level=fatal msg="build failed"
leeway build components/ide/code/desktop:docker -Dversion=20230512
time="2023-05-12T02:14:35Z" level=fatal msg="package \"components/ide/code/desktop:docker\" does not exist"
leeway build components/ide/code/codehelper:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib                  [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-protocol:gitpod-schema  [90m(version 3832e8872d751eca5bd2028c5a907c6b266c75c3)[0m
[32mðŸ“¦  cached locally[0m  components/supervisor-api/go:lib          [90m(version 6505b1a01e6e7b434713f4944dcab84b18d89b56)[0m
[32mðŸ“¦  cached locally[0m  dev/addlicense:app                        [90m(version c322ba901584f00744aef2db3f81d8d0e5c0512b)[0m
[33mðŸ”§  build[0m           components/gitpod-protocol/go:lib         [90m(version a6620338e66a1e62fedeb9ada5bcce1af997b154)[0m
[33mðŸ”§  build[0m           components/ide/code/codehelper:app        [90m(version 4b1f66aedcaf36a9d342f07f5175f63393ea71be)[0m
[33mðŸ”§  build[0m           components/ide/code/codehelper:docker     [90m(version fef74248d2154c0d3a6893655cbc1553ed595de5)[0m

[90m[components/gitpod-protocol/go:lib] [0m[33mbuild started[0m [0;90m(version a6620338e66a1e62fedeb9ada5bcce1af997b154)[0m
[90m[components/gitpod-protocol/go:lib] [0mComponent Path: ./scripts/..
[90m[components/gitpod-protocol/go:lib] [0mConfig Path: ./_deps/components-gitpod-protocol--gitpod-schema/gitpod-schema.json
[90m[components/gitpod-protocol/go:lib] [0mConfig Types Path: ./scripts/../gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m./scripts/generate-config.sh: line 26: schema-generate: command not found
[90m[components/gitpod-protocol/go:lib] [0m./scripts/../gitpod-config-types.go:1:1: expected 'package', found 'EOF'
[90m[components/gitpod-protocol/go:lib] [0mdiff --git a/gitpod-config-types.go b/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0mindex f563ead..cddd97f 100644
[90m[components/gitpod-protocol/go:lib] [0m--- a/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m+++ b/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m@@ -2,224 +2,3 @@
[90m[components/gitpod-protocol/go:lib] [0m // Licensed under the GNU Affero General Public License (AGPL).
[90m[components/gitpod-protocol/go:lib] [0m // See License.AGPL.txt in the project root for license information.
[90m[components/gitpod-protocol/go:lib] [0m 
[90m[components/gitpod-protocol/go:lib] [0m-// Code generated by schema-generate. DO NOT EDIT.
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-package protocol
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// AdditionalRepositoriesItems
[90m[components/gitpod-protocol/go:lib] [0m-type AdditionalRepositoriesItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the repository should be checked out relative to `/workspace`. Defaults to the simple repository name.
[90m[components/gitpod-protocol/go:lib] [0m-	CheckoutLocation string `yaml:"checkoutLocation,omitempty" json:"checkoutLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The url of the git repository to clone. Supports any context URLs.
[90m[components/gitpod-protocol/go:lib] [0m-	Url string `yaml:"url" json:"url"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// CoreDump Configure the default action of certain signals is to cause a process to terminate and produce a core dump file, a file containing an image of the process's memory at the time of termination. Disabled by default.
[90m[components/gitpod-protocol/go:lib] [0m-type CoreDump struct {
[90m[components/gitpod-protocol/go:lib] [0m-	Enabled bool `yaml:"enabled,omitempty" json:"enabled,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// the hard limit acts as a ceiling for the soft limit. For more details please check https://man7.org/linux/man-pages/man2/getrlimit.2.html
[90m[components/gitpod-protocol/go:lib] [0m-	HardLimit float64 `yaml:"hardLimit,omitempty" json:"hardLimit,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// upper limit on the size of the core dump file that will be produced if it receives a core dump signal
[90m[components/gitpod-protocol/go:lib] [0m-	SoftLimit float64 `yaml:"softLimit,omitempty" json:"softLimit,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Env Environment variables to set.
[90m[components/gitpod-protocol/go:lib] [0m-type Env struct {
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Github Configures Gitpod's GitHub app
[90m[components/gitpod-protocol/go:lib] [0m-type Github struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Set to true to enable workspace prebuilds, false to disable them. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuilds interface{} `yaml:"prebuilds,omitempty" json:"prebuilds,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// GitpodConfig
[90m[components/gitpod-protocol/go:lib] [0m-type GitpodConfig struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of additional repositories that are part of this project.
[90m[components/gitpod-protocol/go:lib] [0m-	AdditionalRepositories []*AdditionalRepositoriesItems `yaml:"additionalRepositories,omitempty" json:"additionalRepositories,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the repository should be checked out relative to `/workspace`. Defaults to the simple repository name.
[90m[components/gitpod-protocol/go:lib] [0m-	CheckoutLocation string `yaml:"checkoutLocation,omitempty" json:"checkoutLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure the default action of certain signals is to cause a process to terminate and produce a core dump file, a file containing an image of the process's memory at the time of termination. Disabled by default.
[90m[components/gitpod-protocol/go:lib] [0m-	CoreDump *CoreDump `yaml:"coreDump,omitempty" json:"coreDump,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Experimental network configuration in workspaces (deprecated). Enabled by default
[90m[components/gitpod-protocol/go:lib] [0m-	ExperimentalNetwork bool `yaml:"experimentalNetwork,omitempty" json:"experimentalNetwork,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Git config values should be provided in pairs. E.g. `core.autocrlf: input`. See https://git-scm.com/docs/git-config#_values.
[90m[components/gitpod-protocol/go:lib] [0m-	GitConfig map[string]string `yaml:"gitConfig,omitempty" json:"gitConfig,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configures Gitpod's GitHub app
[90m[components/gitpod-protocol/go:lib] [0m-	Github *Github `yaml:"github,omitempty" json:"github,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The Docker image to run your workspace in.
[90m[components/gitpod-protocol/go:lib] [0m-	Image interface{} `yaml:"image,omitempty" json:"image,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure JetBrains integration
[90m[components/gitpod-protocol/go:lib] [0m-	Jetbrains *Jetbrains `yaml:"jetbrains,omitempty" json:"jetbrains,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The main repository, containing the dev environment configuration.
[90m[components/gitpod-protocol/go:lib] [0m-	MainConfiguration string `yaml:"mainConfiguration,omitempty" json:"mainConfiguration,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of exposed ports.
[90m[components/gitpod-protocol/go:lib] [0m-	Ports []*PortsItems `yaml:"ports,omitempty" json:"ports,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of tasks to run on start. Each task will open a terminal in the IDE.
[90m[components/gitpod-protocol/go:lib] [0m-	Tasks []*TasksItems `yaml:"tasks,omitempty" json:"tasks,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure VS Code integration
[90m[components/gitpod-protocol/go:lib] [0m-	Vscode *Vscode `yaml:"vscode,omitempty" json:"vscode,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the IDE's workspace should be opened. Supports vscode's `*.code-workspace` files.
[90m[components/gitpod-protocol/go:lib] [0m-	WorkspaceLocation string `yaml:"workspaceLocation,omitempty" json:"workspaceLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Image_object The Docker image to run your workspace in.
[90m[components/gitpod-protocol/go:lib] [0m-type Image_object struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Relative path to the context path (optional). Should only be set if you need to copy files into the image.
[90m[components/gitpod-protocol/go:lib] [0m-	Context string `yaml:"context,omitempty" json:"context,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Relative path to a docker file.
[90m[components/gitpod-protocol/go:lib] [0m-	File string `yaml:"file" json:"file"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Jetbrains Configure JetBrains integration
[90m[components/gitpod-protocol/go:lib] [0m-type Jetbrains struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure CLion integration
[90m[components/gitpod-protocol/go:lib] [0m-	Clion *JetbrainsProduct `yaml:"clion,omitempty" json:"clion,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure GoLand integration
[90m[components/gitpod-protocol/go:lib] [0m-	Goland *JetbrainsProduct `yaml:"goland,omitempty" json:"goland,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure IntelliJ integration
[90m[components/gitpod-protocol/go:lib] [0m-	Intellij *JetbrainsProduct `yaml:"intellij,omitempty" json:"intellij,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure PhpStorm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Phpstorm *JetbrainsProduct `yaml:"phpstorm,omitempty" json:"phpstorm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of plugins which should be installed for all JetBrains product for users of this workspace. From the JetBrains Marketplace page, find a page of the required plugin, select 'Versions' tab, click any version to copy pluginId (short name such as org.rust.lang) of the plugin you want to install.
[90m[components/gitpod-protocol/go:lib] [0m-	Plugins []string `yaml:"plugins,omitempty" json:"plugins,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure PyCharm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Pycharm *JetbrainsProduct `yaml:"pycharm,omitempty" json:"pycharm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure Rider integration
[90m[components/gitpod-protocol/go:lib] [0m-	Rider *JetbrainsProduct `yaml:"rider,omitempty" json:"rider,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure RubyMine integration
[90m[components/gitpod-protocol/go:lib] [0m-	Rubymine *JetbrainsProduct `yaml:"rubymine,omitempty" json:"rubymine,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure WebStorm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Webstorm *JetbrainsProduct `yaml:"webstorm,omitempty" json:"webstorm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// JetbrainsProduct
[90m[components/gitpod-protocol/go:lib] [0m-type JetbrainsProduct struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of plugins which should be installed for users of this workspace. From the JetBrains Marketplace page, find a page of the required plugin, select 'Versions' tab, click any version to copy pluginId (short name such as org.rust.lang) of the plugin you want to install.
[90m[components/gitpod-protocol/go:lib] [0m-	Plugins []string `yaml:"plugins,omitempty" json:"plugins,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable warming up of JetBrains backend in prebuilds.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuilds *Prebuilds `yaml:"prebuilds,omitempty" json:"prebuilds,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure JVM options, for instance '-Xmx=4096m'.
[90m[components/gitpod-protocol/go:lib] [0m-	Vmoptions string `yaml:"vmoptions,omitempty" json:"vmoptions,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// PortsItems
[90m[components/gitpod-protocol/go:lib] [0m-type PortsItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A description to identify what is this port used for.
[90m[components/gitpod-protocol/go:lib] [0m-	Description string `yaml:"description,omitempty" json:"description,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Port name.
[90m[components/gitpod-protocol/go:lib] [0m-	Name string `yaml:"name,omitempty" json:"name,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// What to do when a service on this port was detected. 'notify' (default) will show a notification asking the user what to do. 'open-browser' will open a new browser tab. 'open-preview' will open in the preview on the right of the IDE. 'ignore' will do nothing.
[90m[components/gitpod-protocol/go:lib] [0m-	OnOpen string `yaml:"onOpen,omitempty" json:"onOpen,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The port number (e.g. 1337) or range (e.g. 3000-3999) to expose.
[90m[components/gitpod-protocol/go:lib] [0m-	Port interface{} `yaml:"port" json:"port"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The protocol to be used. (deprecated)
[90m[components/gitpod-protocol/go:lib] [0m-	Protocol string `yaml:"protocol,omitempty" json:"protocol,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Whether the port visibility should be private or public. 'private' (default) will only allow users with workspace access to access the port. 'public' will allow everyone with the port URL to access the port.
[90m[components/gitpod-protocol/go:lib] [0m-	Visibility string `yaml:"visibility,omitempty" json:"visibility,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Prebuilds Enable warming up of JetBrains backend in prebuilds.
[90m[components/gitpod-protocol/go:lib] [0m-type Prebuilds struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Whether only stable, latest or both versions should be warmed up. Default is stable only.
[90m[components/gitpod-protocol/go:lib] [0m-	Version string `yaml:"version,omitempty" json:"version,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Prebuilds_object Set to true to enable workspace prebuilds, false to disable them. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-type Prebuilds_object struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a Review in Gitpod badge to pull requests. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	AddBadge bool `yaml:"addBadge,omitempty" json:"addBadge,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a commit check to pull requests. Set to 'fail-on-error' if you want broken prebuilds to block merging. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	AddCheck interface{} `yaml:"addCheck,omitempty" json:"addCheck,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a label to a PR when it's prebuilt. Set to true to use the default label (prebuilt-in-gitpod) or set to a string to use a different label name. This is a beta feature and may be unreliable. Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	AddLabel interface{} `yaml:"addLabel,omitempty" json:"addLabel,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for all branches. Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	Branches bool `yaml:"branches,omitempty" json:"branches,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for the default branch (typically master). Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	Master bool `yaml:"master,omitempty" json:"master,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for pull-requests from the original repo. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	PullRequests bool `yaml:"pullRequests,omitempty" json:"pullRequests,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for pull-requests from any repo (e.g. from forks). Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	PullRequestsFromForks bool `yaml:"pullRequestsFromForks,omitempty" json:"pullRequestsFromForks,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// TasksItems
[90m[components/gitpod-protocol/go:lib] [0m-type TasksItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run before `init` and the main `command`. This command is executed on every start and is expected to terminate. If it fails, the following commands will not be executed.
[90m[components/gitpod-protocol/go:lib] [0m-	Before string `yaml:"before,omitempty" json:"before,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The main shell command to run after `before` and `init`. This command is executed last on every start and doesn't have to terminate.
[90m[components/gitpod-protocol/go:lib] [0m-	Command string `yaml:"command,omitempty" json:"command,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Environment variables to set.
[90m[components/gitpod-protocol/go:lib] [0m-	Env *Env `yaml:"env,omitempty" json:"env,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run between `before` and the main `command`. This command is executed only on after initializing a workspace with a fresh clone, but not on restarts and snapshots. This command is expected to terminate. If it fails, the `command` property will not be executed.
[90m[components/gitpod-protocol/go:lib] [0m-	Init string `yaml:"init,omitempty" json:"init,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Name of the task. Shown on the tab of the opened terminal.
[90m[components/gitpod-protocol/go:lib] [0m-	Name string `yaml:"name,omitempty" json:"name,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The panel/area where to open the terminal. Default is 'bottom' panel.
[90m[components/gitpod-protocol/go:lib] [0m-	OpenIn string `yaml:"openIn,omitempty" json:"openIn,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The opening mode. Default is 'tab-after'.
[90m[components/gitpod-protocol/go:lib] [0m-	OpenMode string `yaml:"openMode,omitempty" json:"openMode,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run after `before`. This command is executed only on during workspace prebuilds. This command is expected to terminate. If it fails, the workspace build fails.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuild string `yaml:"prebuild,omitempty" json:"prebuild,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Vscode Configure VS Code integration
[90m[components/gitpod-protocol/go:lib] [0m-type Vscode struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of extensions which should be installed for users of this workspace. The identifier of an extension is always '${publisher}.${name}'. For example: 'vscode.csharp'.
[90m[components/gitpod-protocol/go:lib] [0m-	Extensions []string `yaml:"extensions,omitempty" json:"extensions,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m[0;31mpackage build failed[0m
[90m[components/gitpod-protocol/go:lib] [0m[1;37mReason:[0m exit status 1
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:14:36Z" level=fatal msg="build failed"
leeway build components/ide/code:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/ide/code:docker  [90m(version 294fa29b2ada05f9cc7c1b4a9c3e6a49f7fd9b34)[0m


[0;32mbuild succeded[0m
leeway build components/ide/jetbrains/backend-plugin:docker -Dversion=20230512
[33mðŸ”§  build[0m  components/gitpod-protocol/java:lib                    [90m(version bbe33c90d80f744ab7a0bde6219e3a6f41bc6046)[0m
[33mðŸ”§  build[0m  components/ide/jetbrains/backend-plugin:docker         [90m(version a02bf6475cad6cb76f0e1c23f212e0634ad2d3dd)[0m
[33mðŸ”§  build[0m  components/ide/jetbrains/backend-plugin:latest         [90m(version 1edf02d07b86ca453f63e2ea3026aa2e8538f3e6)[0m
[33mðŸ”§  build[0m  components/ide/jetbrains/backend-plugin:plugin-latest  [90m(version 898c065e8968c510425c7bd718b1d62743b26f3e)[0m
[33mðŸ”§  build[0m  components/ide/jetbrains/backend-plugin:plugin-stable  [90m(version a33a8748d9807e6dc7ef000648328f32a7e95970)[0m
[33mðŸ”§  build[0m  components/ide/jetbrains/backend-plugin:stable         [90m(version 0715c43b9f4457f9eeafb85d44162b5373bc6e0c)[0m
[33mðŸ”§  build[0m  components/supervisor-api/java:lib                     [90m(version 24d907858b604f7907d2487a27f1b602b6727d4b)[0m
[33mðŸ”§  build[0m  components/supervisor-api:java                         [90m(version ab87682011b972d51a1fde0730ee69cf70c2bdf0)[0m

[90m[components/gitpod-protocol/java:lib] [0m[33mbuild started[0m [0;90m(version bbe33c90d80f744ab7a0bde6219e3a6f41bc6046)[0m
[90m[components/supervisor-api:java] [0m[33mbuild started[0m [0;90m(version ab87682011b972d51a1fde0730ee69cf70c2bdf0)[0m
[90m[components/gitpod-protocol/java:lib] [0m
[90m[components/gitpod-protocol/java:lib] [0mERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
[90m[components/gitpod-protocol/java:lib] [0m
[90m[components/gitpod-protocol/java:lib] [0mPlease set the JAVA_HOME variable in your environment to match the
[90m[components/gitpod-protocol/java:lib] [0mlocation of your Java installation.
[90m[components/gitpod-protocol/java:lib] [0m
[90m[components/gitpod-protocol/java:lib] [0m[0;31mpackage build failed[0m
[90m[components/gitpod-protocol/java:lib] [0m[1;37mReason:[0m exit status 1
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:14:37Z" level=fatal msg="build failed"
leeway build components/ide/jetbrains/image:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/ide/jetbrains/image:download-clion-latest     [90m(version 0c35df7e266553bc60291309fc8cc06865dad003)[0m
[32mðŸ“¦  cached locally[0m  components/ide/jetbrains/image:download-goland           [90m(version 2423ff4f94a6effca119ef009c149998caedf246)[0m
[32mðŸ“¦  cached locally[0m  components/ide/jetbrains/image:download-phpstorm         [90m(version 5d78a4db1500eb05e74e1647d1baa40c810da33d)[0m
[32mðŸ“¦  cached locally[0m  components/ide/jetbrains/image:download-phpstorm-latest  [90m(version 8783cc40a9ad437461a7771f427d01ee6e361a23)[0m
[32mðŸ“¦  cached locally[0m  components/ide/jetbrains/image:download-pycharm          [90m(version 81f9cfe0e3efa6387c627146a71159ac3b63950d)[0m
[32mðŸ“¦  cached locally[0m  components/ide/jetbrains/image:download-rider            [90m(version f1859f8ec3afcb7a40cdffcf55930fa0817694b0)[0m
[32mðŸ“¦  cached locally[0m  components/ide/jetbrains/image:download-rider-latest     [90m(version 8c6214abedd1c321ccf24f8a7f1c46540e0b6826)[0m
[32mðŸ“¦  cached locally[0m  components/ide/jetbrains/image:download-rubymine-latest  [90m(version d715ae658a99d98e7e9c36008e8a63250ec7e0f7)[0m
[32mðŸ“¦  cached locally[0m  components/ide/jetbrains/image:download-webstorm         [90m(version 7cffd4570bfd59e1ebab36bd2b77d3e2d62a0dcc)[0m
[32mðŸ“¦  cached locally[0m  components/ide/jetbrains/image:download-webstorm-latest  [90m(version ec74150192bf6796d57baf02171d0f13dadde39b)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/cli:app                         [90m(version 261b6393f07eedf253591d8104eb1e47de67264e)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:clion                     [90m(version d09811c581cb83d88e1d4cbbec1b5ae4f891fbbf)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:clion-latest              [90m(version 8c07c8a405ca9db9ecc34cb5766ef7ee71ea2269)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:docker                    [90m(version 9b2848174247411384ac2f9e90978cf985c09d49)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:download-clion            [90m(version 4d847f2e77f992418ad992e927c96f2112619e41)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:download-goland-latest    [90m(version 999b8911d6d1981a3720d1c4bfaf2b5cbd4bb73c)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:download-intellij         [90m(version c7403349757161e7fa18bc085fea3116f36b92bb)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:download-intellij-latest  [90m(version ab5c403aad95043ad9bccf7abb4ec77b43a27de7)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:download-pycharm-latest   [90m(version 9a6044003618b90931f8a4890331d0c7a88d5b0a)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:download-rubymine         [90m(version b590a86b7f947262dd1645ef1b36775ca4bb2157)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:goland                    [90m(version b1ef7e815f9206b21a0eb018d01799ab6d6cf51b)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:goland-latest             [90m(version e80c6fd76bcddaca4099d41fd612c01f1a697ac5)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:intellij                  [90m(version 97be66f1e7370e70f3ddb13aacc2faeeaa7c2402)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:intellij-latest           [90m(version 324721e5bd6d94ac96142f125b3fe6f59f188429)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:phpstorm                  [90m(version aa0e79e58a9e0a1274a160a269e04557737e3cbf)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:phpstorm-latest           [90m(version 9b3e921f32d275efc7c5ec7203172c9bd1947a32)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:pycharm                   [90m(version 28881db0aa84d3c772c8a1a076e7f7b7e49c3025)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:pycharm-latest            [90m(version 612c6d50d226a98366b2a9ac85888e0ff9b47346)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:rider                     [90m(version ba515b5914fc8f7fa68d4b4a2200904afabdc152)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:rider-latest              [90m(version 43936264719c7b343a063d6b50e75a547734124b)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:rubymine                  [90m(version 943164544b9b46089e0e8cc462b55bdd549b994a)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:rubymine-latest           [90m(version c665446a3b165769770a3506cfcfc285d4d2a89b)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:webstorm                  [90m(version ebb8a5959081a2f864d751a2b99033b2c5a2a3e9)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/image:webstorm-latest           [90m(version b8495fb2262bdfa2bf732388c656bd96c7a4ad88)[0m

[90m[components/ide/jetbrains/image:download-intellij] [0m[33mbuild started[0m [0;90m(version c7403349757161e7fa18bc085fea3116f36b92bb)[0m
[90m[components/ide/jetbrains/image:download-goland-latest] [0m[33mbuild started[0m [0;90m(version 999b8911d6d1981a3720d1c4bfaf2b5cbd4bb73c)[0m
[90m[components/ide/jetbrains/cli:app] [0m[33mbuild started[0m [0;90m(version 261b6393f07eedf253591d8104eb1e47de67264e)[0m
[90m[components/ide/jetbrains/image:download-pycharm-latest] [0m[33mbuild started[0m [0;90m(version 9a6044003618b90931f8a4890331d0c7a88d5b0a)[0m
[90m[components/ide/jetbrains/image:download-rubymine] [0m[33mbuild started[0m [0;90m(version b590a86b7f947262dd1645ef1b36775ca4bb2157)[0m
[90m[components/ide/jetbrains/image:download-intellij-latest] [0m[33mbuild started[0m [0;90m(version ab5c403aad95043ad9bccf7abb4ec77b43a27de7)[0m
[90m[components/ide/jetbrains/image:download-clion] [0m[33mbuild started[0m [0;90m(version 4d847f2e77f992418ad992e927c96f2112619e41)[0m
[90m[components/ide/jetbrains/cli:app] [0mlevel=error msg="[linters_context] typechecking error: pattern ./...: directory prefix . does not contain main module or its selected dependencies"
[90m[components/ide/jetbrains/cli:app] [0m[0;31mpackage build failed[0m
[90m[components/ide/jetbrains/cli:app] [0m[1;37mReason:[0m exit status 7
[90m[components/ide/jetbrains/image:webstorm-latest] [0m[33mbuild started[0m [0;90m(version b8495fb2262bdfa2bf732388c656bd96c7a4ad88)[0m
[90m[components/ide/jetbrains/image:pycharm] [0m[33mbuild started[0m [0;90m(version 28881db0aa84d3c772c8a1a076e7f7b7e49c3025)[0m
[90m[components/ide/jetbrains/image:rider] [0m[33mbuild started[0m [0;90m(version ba515b5914fc8f7fa68d4b4a2200904afabdc152)[0m
[90m[components/ide/jetbrains/image:rubymine-latest] [0m[33mbuild started[0m [0;90m(version c665446a3b165769770a3506cfcfc285d4d2a89b)[0m
[90m[components/ide/jetbrains/image:webstorm] [0m[33mbuild started[0m [0;90m(version ebb8a5959081a2f864d751a2b99033b2c5a2a3e9)[0m
[90m[components/ide/jetbrains/image:rider-latest] [0m[33mbuild started[0m [0;90m(version 43936264719c7b343a063d6b50e75a547734124b)[0m
[90m[components/ide/jetbrains/image:phpstorm-latest] [0m[33mbuild started[0m [0;90m(version 9b3e921f32d275efc7c5ec7203172c9bd1947a32)[0m
[90m[components/ide/jetbrains/image:clion-latest] [0m[33mbuild started[0m [0;90m(version 8c07c8a405ca9db9ecc34cb5766ef7ee71ea2269)[0m
[90m[components/ide/jetbrains/image:goland] [0m[33mbuild started[0m [0;90m(version b1ef7e815f9206b21a0eb018d01799ab6d6cf51b)[0m
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:14:39Z" level=fatal msg="build failed"
leeway build components/ide/jetbrains/launcher:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib                  [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-protocol:gitpod-schema  [90m(version 3832e8872d751eca5bd2028c5a907c6b266c75c3)[0m
[32mðŸ“¦  cached locally[0m  components/supervisor-api/go:lib          [90m(version 6505b1a01e6e7b434713f4944dcab84b18d89b56)[0m
[32mðŸ“¦  cached locally[0m  dev/addlicense:app                        [90m(version c322ba901584f00744aef2db3f81d8d0e5c0512b)[0m
[33mðŸ”§  build[0m           components/gitpod-protocol/go:lib         [90m(version a6620338e66a1e62fedeb9ada5bcce1af997b154)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/launcher:app     [90m(version 7f52d68a2a268049fffa33a1245aeb7a0a29961a)[0m
[33mðŸ”§  build[0m           components/ide/jetbrains/launcher:docker  [90m(version 730e92178f327e705de0319318b19d563982bdc6)[0m

[90m[components/gitpod-protocol/go:lib] [0m[33mbuild started[0m [0;90m(version a6620338e66a1e62fedeb9ada5bcce1af997b154)[0m
[90m[components/gitpod-protocol/go:lib] [0mComponent Path: ./scripts/..
[90m[components/gitpod-protocol/go:lib] [0mConfig Path: ./_deps/components-gitpod-protocol--gitpod-schema/gitpod-schema.json
[90m[components/gitpod-protocol/go:lib] [0mConfig Types Path: ./scripts/../gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m./scripts/generate-config.sh: line 26: schema-generate: command not found
[90m[components/gitpod-protocol/go:lib] [0m./scripts/../gitpod-config-types.go:1:1: expected 'package', found 'EOF'
[90m[components/gitpod-protocol/go:lib] [0mdiff --git a/gitpod-config-types.go b/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0mindex f563ead..cddd97f 100644
[90m[components/gitpod-protocol/go:lib] [0m--- a/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m+++ b/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m@@ -2,224 +2,3 @@
[90m[components/gitpod-protocol/go:lib] [0m // Licensed under the GNU Affero General Public License (AGPL).
[90m[components/gitpod-protocol/go:lib] [0m // See License.AGPL.txt in the project root for license information.
[90m[components/gitpod-protocol/go:lib] [0m 
[90m[components/gitpod-protocol/go:lib] [0m-// Code generated by schema-generate. DO NOT EDIT.
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-package protocol
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// AdditionalRepositoriesItems
[90m[components/gitpod-protocol/go:lib] [0m-type AdditionalRepositoriesItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the repository should be checked out relative to `/workspace`. Defaults to the simple repository name.
[90m[components/gitpod-protocol/go:lib] [0m-	CheckoutLocation string `yaml:"checkoutLocation,omitempty" json:"checkoutLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The url of the git repository to clone. Supports any context URLs.
[90m[components/gitpod-protocol/go:lib] [0m-	Url string `yaml:"url" json:"url"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// CoreDump Configure the default action of certain signals is to cause a process to terminate and produce a core dump file, a file containing an image of the process's memory at the time of termination. Disabled by default.
[90m[components/gitpod-protocol/go:lib] [0m-type CoreDump struct {
[90m[components/gitpod-protocol/go:lib] [0m-	Enabled bool `yaml:"enabled,omitempty" json:"enabled,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// the hard limit acts as a ceiling for the soft limit. For more details please check https://man7.org/linux/man-pages/man2/getrlimit.2.html
[90m[components/gitpod-protocol/go:lib] [0m-	HardLimit float64 `yaml:"hardLimit,omitempty" json:"hardLimit,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// upper limit on the size of the core dump file that will be produced if it receives a core dump signal
[90m[components/gitpod-protocol/go:lib] [0m-	SoftLimit float64 `yaml:"softLimit,omitempty" json:"softLimit,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Env Environment variables to set.
[90m[components/gitpod-protocol/go:lib] [0m-type Env struct {
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Github Configures Gitpod's GitHub app
[90m[components/gitpod-protocol/go:lib] [0m-type Github struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Set to true to enable workspace prebuilds, false to disable them. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuilds interface{} `yaml:"prebuilds,omitempty" json:"prebuilds,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// GitpodConfig
[90m[components/gitpod-protocol/go:lib] [0m-type GitpodConfig struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of additional repositories that are part of this project.
[90m[components/gitpod-protocol/go:lib] [0m-	AdditionalRepositories []*AdditionalRepositoriesItems `yaml:"additionalRepositories,omitempty" json:"additionalRepositories,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the repository should be checked out relative to `/workspace`. Defaults to the simple repository name.
[90m[components/gitpod-protocol/go:lib] [0m-	CheckoutLocation string `yaml:"checkoutLocation,omitempty" json:"checkoutLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure the default action of certain signals is to cause a process to terminate and produce a core dump file, a file containing an image of the process's memory at the time of termination. Disabled by default.
[90m[components/gitpod-protocol/go:lib] [0m-	CoreDump *CoreDump `yaml:"coreDump,omitempty" json:"coreDump,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Experimental network configuration in workspaces (deprecated). Enabled by default
[90m[components/gitpod-protocol/go:lib] [0m-	ExperimentalNetwork bool `yaml:"experimentalNetwork,omitempty" json:"experimentalNetwork,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Git config values should be provided in pairs. E.g. `core.autocrlf: input`. See https://git-scm.com/docs/git-config#_values.
[90m[components/gitpod-protocol/go:lib] [0m-	GitConfig map[string]string `yaml:"gitConfig,omitempty" json:"gitConfig,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configures Gitpod's GitHub app
[90m[components/gitpod-protocol/go:lib] [0m-	Github *Github `yaml:"github,omitempty" json:"github,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The Docker image to run your workspace in.
[90m[components/gitpod-protocol/go:lib] [0m-	Image interface{} `yaml:"image,omitempty" json:"image,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure JetBrains integration
[90m[components/gitpod-protocol/go:lib] [0m-	Jetbrains *Jetbrains `yaml:"jetbrains,omitempty" json:"jetbrains,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The main repository, containing the dev environment configuration.
[90m[components/gitpod-protocol/go:lib] [0m-	MainConfiguration string `yaml:"mainConfiguration,omitempty" json:"mainConfiguration,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of exposed ports.
[90m[components/gitpod-protocol/go:lib] [0m-	Ports []*PortsItems `yaml:"ports,omitempty" json:"ports,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of tasks to run on start. Each task will open a terminal in the IDE.
[90m[components/gitpod-protocol/go:lib] [0m-	Tasks []*TasksItems `yaml:"tasks,omitempty" json:"tasks,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure VS Code integration
[90m[components/gitpod-protocol/go:lib] [0m-	Vscode *Vscode `yaml:"vscode,omitempty" json:"vscode,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the IDE's workspace should be opened. Supports vscode's `*.code-workspace` files.
[90m[components/gitpod-protocol/go:lib] [0m-	WorkspaceLocation string `yaml:"workspaceLocation,omitempty" json:"workspaceLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Image_object The Docker image to run your workspace in.
[90m[components/gitpod-protocol/go:lib] [0m-type Image_object struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Relative path to the context path (optional). Should only be set if you need to copy files into the image.
[90m[components/gitpod-protocol/go:lib] [0m-	Context string `yaml:"context,omitempty" json:"context,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Relative path to a docker file.
[90m[components/gitpod-protocol/go:lib] [0m-	File string `yaml:"file" json:"file"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Jetbrains Configure JetBrains integration
[90m[components/gitpod-protocol/go:lib] [0m-type Jetbrains struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure CLion integration
[90m[components/gitpod-protocol/go:lib] [0m-	Clion *JetbrainsProduct `yaml:"clion,omitempty" json:"clion,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure GoLand integration
[90m[components/gitpod-protocol/go:lib] [0m-	Goland *JetbrainsProduct `yaml:"goland,omitempty" json:"goland,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure IntelliJ integration
[90m[components/gitpod-protocol/go:lib] [0m-	Intellij *JetbrainsProduct `yaml:"intellij,omitempty" json:"intellij,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure PhpStorm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Phpstorm *JetbrainsProduct `yaml:"phpstorm,omitempty" json:"phpstorm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of plugins which should be installed for all JetBrains product for users of this workspace. From the JetBrains Marketplace page, find a page of the required plugin, select 'Versions' tab, click any version to copy pluginId (short name such as org.rust.lang) of the plugin you want to install.
[90m[components/gitpod-protocol/go:lib] [0m-	Plugins []string `yaml:"plugins,omitempty" json:"plugins,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure PyCharm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Pycharm *JetbrainsProduct `yaml:"pycharm,omitempty" json:"pycharm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure Rider integration
[90m[components/gitpod-protocol/go:lib] [0m-	Rider *JetbrainsProduct `yaml:"rider,omitempty" json:"rider,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure RubyMine integration
[90m[components/gitpod-protocol/go:lib] [0m-	Rubymine *JetbrainsProduct `yaml:"rubymine,omitempty" json:"rubymine,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure WebStorm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Webstorm *JetbrainsProduct `yaml:"webstorm,omitempty" json:"webstorm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// JetbrainsProduct
[90m[components/gitpod-protocol/go:lib] [0m-type JetbrainsProduct struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of plugins which should be installed for users of this workspace. From the JetBrains Marketplace page, find a page of the required plugin, select 'Versions' tab, click any version to copy pluginId (short name such as org.rust.lang) of the plugin you want to install.
[90m[components/gitpod-protocol/go:lib] [0m-	Plugins []string `yaml:"plugins,omitempty" json:"plugins,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable warming up of JetBrains backend in prebuilds.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuilds *Prebuilds `yaml:"prebuilds,omitempty" json:"prebuilds,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure JVM options, for instance '-Xmx=4096m'.
[90m[components/gitpod-protocol/go:lib] [0m-	Vmoptions string `yaml:"vmoptions,omitempty" json:"vmoptions,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// PortsItems
[90m[components/gitpod-protocol/go:lib] [0m-type PortsItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A description to identify what is this port used for.
[90m[components/gitpod-protocol/go:lib] [0m-	Description string `yaml:"description,omitempty" json:"description,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Port name.
[90m[components/gitpod-protocol/go:lib] [0m-	Name string `yaml:"name,omitempty" json:"name,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// What to do when a service on this port was detected. 'notify' (default) will show a notification asking the user what to do. 'open-browser' will open a new browser tab. 'open-preview' will open in the preview on the right of the IDE. 'ignore' will do nothing.
[90m[components/gitpod-protocol/go:lib] [0m-	OnOpen string `yaml:"onOpen,omitempty" json:"onOpen,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The port number (e.g. 1337) or range (e.g. 3000-3999) to expose.
[90m[components/gitpod-protocol/go:lib] [0m-	Port interface{} `yaml:"port" json:"port"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The protocol to be used. (deprecated)
[90m[components/gitpod-protocol/go:lib] [0m-	Protocol string `yaml:"protocol,omitempty" json:"protocol,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Whether the port visibility should be private or public. 'private' (default) will only allow users with workspace access to access the port. 'public' will allow everyone with the port URL to access the port.
[90m[components/gitpod-protocol/go:lib] [0m-	Visibility string `yaml:"visibility,omitempty" json:"visibility,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Prebuilds Enable warming up of JetBrains backend in prebuilds.
[90m[components/gitpod-protocol/go:lib] [0m-type Prebuilds struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Whether only stable, latest or both versions should be warmed up. Default is stable only.
[90m[components/gitpod-protocol/go:lib] [0m-	Version string `yaml:"version,omitempty" json:"version,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Prebuilds_object Set to true to enable workspace prebuilds, false to disable them. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-type Prebuilds_object struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a Review in Gitpod badge to pull requests. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	AddBadge bool `yaml:"addBadge,omitempty" json:"addBadge,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a commit check to pull requests. Set to 'fail-on-error' if you want broken prebuilds to block merging. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	AddCheck interface{} `yaml:"addCheck,omitempty" json:"addCheck,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a label to a PR when it's prebuilt. Set to true to use the default label (prebuilt-in-gitpod) or set to a string to use a different label name. This is a beta feature and may be unreliable. Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	AddLabel interface{} `yaml:"addLabel,omitempty" json:"addLabel,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for all branches. Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	Branches bool `yaml:"branches,omitempty" json:"branches,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for the default branch (typically master). Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	Master bool `yaml:"master,omitempty" json:"master,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for pull-requests from the original repo. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	PullRequests bool `yaml:"pullRequests,omitempty" json:"pullRequests,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for pull-requests from any repo (e.g. from forks). Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	PullRequestsFromForks bool `yaml:"pullRequestsFromForks,omitempty" json:"pullRequestsFromForks,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// TasksItems
[90m[components/gitpod-protocol/go:lib] [0m-type TasksItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run before `init` and the main `command`. This command is executed on every start and is expected to terminate. If it fails, the following commands will not be executed.
[90m[components/gitpod-protocol/go:lib] [0m-	Before string `yaml:"before,omitempty" json:"before,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The main shell command to run after `before` and `init`. This command is executed last on every start and doesn't have to terminate.
[90m[components/gitpod-protocol/go:lib] [0m-	Command string `yaml:"command,omitempty" json:"command,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Environment variables to set.
[90m[components/gitpod-protocol/go:lib] [0m-	Env *Env `yaml:"env,omitempty" json:"env,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run between `before` and the main `command`. This command is executed only on after initializing a workspace with a fresh clone, but not on restarts and snapshots. This command is expected to terminate. If it fails, the `command` property will not be executed.
[90m[components/gitpod-protocol/go:lib] [0m-	Init string `yaml:"init,omitempty" json:"init,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Name of the task. Shown on the tab of the opened terminal.
[90m[components/gitpod-protocol/go:lib] [0m-	Name string `yaml:"name,omitempty" json:"name,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The panel/area where to open the terminal. Default is 'bottom' panel.
[90m[components/gitpod-protocol/go:lib] [0m-	OpenIn string `yaml:"openIn,omitempty" json:"openIn,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The opening mode. Default is 'tab-after'.
[90m[components/gitpod-protocol/go:lib] [0m-	OpenMode string `yaml:"openMode,omitempty" json:"openMode,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run after `before`. This command is executed only on during workspace prebuilds. This command is expected to terminate. If it fails, the workspace build fails.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuild string `yaml:"prebuild,omitempty" json:"prebuild,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Vscode Configure VS Code integration
[90m[components/gitpod-protocol/go:lib] [0m-type Vscode struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of extensions which should be installed for users of this workspace. The identifier of an extension is always '${publisher}.${name}'. For example: 'vscode.csharp'.
[90m[components/gitpod-protocol/go:lib] [0m-	Extensions []string `yaml:"extensions,omitempty" json:"extensions,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m[0;31mpackage build failed[0m
[90m[components/gitpod-protocol/go:lib] [0m[1;37mReason:[0m exit status 1
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:14:40Z" level=fatal msg="build failed"
leeway build components/image-builder-bob:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib                  [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/image-builder-bob:app          [90m(version dd8fc2738d5ef916288a38012cb0c81baf4b3dfd)[0m
[32mðŸ“¦  cached locally[0m  components/image-builder-bob:runc-facade  [90m(version 25b0a179ec500d041daf3337da287ea3e3ebd317)[0m
[33mðŸ”§  build[0m           components/image-builder-bob:docker       [90m(version d22a174f28ed7c943c02225c807204fe9cc740a4)[0m

[90m[components/image-builder-bob:docker] [0m[33mbuild started[0m [0;90m(version d22a174f28ed7c943c02225c807204fe9cc740a4)[0m
[90m[components/image-builder-bob:docker] [0m#1 [internal] load .dockerignore
[90m[components/image-builder-bob:docker] [0m#1 transferring context: 2B done
[90m[components/image-builder-bob:docker] [0m#1 DONE 0.0s
[90m[components/image-builder-bob:docker] [0m
[90m[components/image-builder-bob:docker] [0m#2 [internal] load build definition from Dockerfile
[90m[components/image-builder-bob:docker] [0m#2 transferring dockerfile: 1.07kB done
[90m[components/image-builder-bob:docker] [0m#2 DONE 0.0s
[90m[components/image-builder-bob:docker] [0m
[90m[components/image-builder-bob:docker] [0m#3 [internal] load metadata for docker.io/moby/buildkit:v0.11.4
[90m[components/image-builder-bob:docker] [0m#3 DONE 3.2s
[90m[components/image-builder-bob:docker] [0m
[90m[components/image-builder-bob:docker] [0m#4 [1/9] FROM docker.io/moby/buildkit:v0.11.4@sha256:990e55e71c16281ed72f00b0308980865dae03d598b2cb8316da023d80336543
[90m[components/image-builder-bob:docker] [0m#4 DONE 0.0s
[90m[components/image-builder-bob:docker] [0m
[90m[components/image-builder-bob:docker] [0m#5 [internal] load build context
[90m[components/image-builder-bob:docker] [0m#5 transferring context: 593B done
[90m[components/image-builder-bob:docker] [0m#5 DONE 1.0s
[90m[components/image-builder-bob:docker] [0m
[90m[components/image-builder-bob:docker] [0m#6 [3/9] COPY components-image-builder-bob--runc-facade/bob /app/runc-facade
[90m[components/image-builder-bob:docker] [0m#6 CACHED
[90m[components/image-builder-bob:docker] [0m
[90m[components/image-builder-bob:docker] [0m#7 [4/9] RUN chmod 4755 /app/runc-facade     && mv /usr/bin/buildkit-runc /usr/bin/bob-runc     && mv /app/runc-facade /usr/bin/buildkit-runc
[90m[components/image-builder-bob:docker] [0m#7 CACHED
[90m[components/image-builder-bob:docker] [0m
[90m[components/image-builder-bob:docker] [0m#8 [5/9] COPY components-image-builder-bob--app/bob /app/
[90m[components/image-builder-bob:docker] [0m#8 CACHED
[90m[components/image-builder-bob:docker] [0m
[90m[components/image-builder-bob:docker] [0m#9 [6/9] RUN chmod 4755 /app/bob
[90m[components/image-builder-bob:docker] [0m#9 CACHED
[90m[components/image-builder-bob:docker] [0m
[90m[components/image-builder-bob:docker] [0m#10 [7/9] RUN mkdir /ide
[90m[components/image-builder-bob:docker] [0m#10 CACHED
[90m[components/image-builder-bob:docker] [0m
[90m[components/image-builder-bob:docker] [0m#11 [8/9] COPY ide-startup.sh /ide/startup.sh
[90m[components/image-builder-bob:docker] [0m#11 CACHED
[90m[components/image-builder-bob:docker] [0m
[90m[components/image-builder-bob:docker] [0m#12 [2/9] RUN apk --no-cache add sudo bash     && addgroup -g 33333 gitpod     && adduser -D -h /home/gitpod -s /bin/sh -u 33333 -G gitpod gitpod     && echo "gitpod ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/gitpod     && chmod 0440 /etc/sudoers.d/gitpod
[90m[components/image-builder-bob:docker] [0m#12 CACHED
[90m[components/image-builder-bob:docker] [0m
[90m[components/image-builder-bob:docker] [0m#13 [9/9] COPY supervisor-ide-config.json /ide/
[90m[components/image-builder-bob:docker] [0m#13 CACHED
[90m[components/image-builder-bob:docker] [0m
[90m[components/image-builder-bob:docker] [0m#14 exporting to image
[90m[components/image-builder-bob:docker] [0m#14 exporting layers done
[90m[components/image-builder-bob:docker] [0m#14 writing image sha256:0b07b85c584e61825db52f3f5c7dacd60639977b54d05fd17c28190543b867f1 0.1s done
[90m[components/image-builder-bob:docker] [0m#14 naming to docker.io/library/d22a174f28ed7c943c02225c807204fe9cc740a4
[90m[components/image-builder-bob:docker] [0m#14 naming to docker.io/library/d22a174f28ed7c943c02225c807204fe9cc740a4 0.4s done
[90m[components/image-builder-bob:docker] [0m#14 DONE 0.5s
[90m[components/image-builder-bob:docker] [0mThe push refers to repository [registry.cn-beijing.aliyuncs.com/self-build-gitpod/image-builder-mk3/bob]
[90m[components/image-builder-bob:docker] [0mebe134987aca: Preparing
[90m[components/image-builder-bob:docker] [0m01a0a9889b54: Preparing
[90m[components/image-builder-bob:docker] [0md04637e32e6d: Preparing
[90m[components/image-builder-bob:docker] [0mee5b79fa5811: Preparing
[90m[components/image-builder-bob:docker] [0m3f36e10773be: Preparing
[90m[components/image-builder-bob:docker] [0ma45d334c9585: Preparing
[90m[components/image-builder-bob:docker] [0m246f6ee14655: Preparing
[90m[components/image-builder-bob:docker] [0m2dc5c5fa4bd5: Preparing
[90m[components/image-builder-bob:docker] [0m8093a3b80cae: Preparing
[90m[components/image-builder-bob:docker] [0m95bebdc893c5: Preparing
[90m[components/image-builder-bob:docker] [0m3935e1a224f8: Preparing
[90m[components/image-builder-bob:docker] [0m7cd52847ad77: Preparing
[90m[components/image-builder-bob:docker] [0ma45d334c9585: Waiting
[90m[components/image-builder-bob:docker] [0m246f6ee14655: Waiting
[90m[components/image-builder-bob:docker] [0m2dc5c5fa4bd5: Waiting
[90m[components/image-builder-bob:docker] [0m3935e1a224f8: Waiting
[90m[components/image-builder-bob:docker] [0m8093a3b80cae: Waiting
[90m[components/image-builder-bob:docker] [0m95bebdc893c5: Waiting
[90m[components/image-builder-bob:docker] [0m7cd52847ad77: Waiting
[90m[components/image-builder-bob:docker] [0mdenied: requested access to the resource is denied
[90m[components/image-builder-bob:docker] [0m[0;31mpackage build failed[0m
[90m[components/image-builder-bob:docker] [0m[1;37mReason:[0m exit status 1
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:14:53Z" level=fatal msg="build failed"
leeway build components/image-builder-mk3:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib               [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/content-service-api/go:lib  [90m(version 96c22b2ddc7509c580fb952baff56c3a8bfd632d)[0m
[32mðŸ“¦  cached locally[0m  components/content-service:lib         [90m(version b0cd0898613468d7c336a07949eab1a254208889)[0m
[32mðŸ“¦  cached locally[0m  components/image-builder-api/go:lib    [90m(version f569f4c7ed2550ed9c4c7109c92f4e1ee0768739)[0m
[32mðŸ“¦  cached locally[0m  components/image-builder-mk3:app       [90m(version 283bf1b40ffab66b63f3f2f0e3649afbe1fdf685)[0m
[32mðŸ“¦  cached locally[0m  components/image-builder-mk3:docker    [90m(version 1da5d274b0a909e0759b3fff6349a7b8f3a6ef8a)[0m
[32mðŸ“¦  cached locally[0m  components/registry-facade-api/go:lib  [90m(version 11d9730b48b27fad322e28b6a16b495e98e43527)[0m
[32mðŸ“¦  cached locally[0m  components/supervisor-api/go:lib       [90m(version 6505b1a01e6e7b434713f4944dcab84b18d89b56)[0m
[32mðŸ“¦  cached locally[0m  components/ws-manager-api/go:lib       [90m(version d89281deca1e97571505c1d2d858062eab5c5d01)[0m


[0;32mbuild succeded[0m
leeway build components/installation-telemetry:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib                  [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[33mðŸ”§  build[0m           components/installation-telemetry:app     [90m(version 65fd3fcbdfd0fda567d35c9a168e9f6513043632)[0m
[33mðŸ”§  build[0m           components/installation-telemetry:docker  [90m(version c4c38c42eb1ad0e9865de9094c4d0c27df6bb50f)[0m

[0;31mbuild failed[0m
[1;37mReason:[0m cannot build with unresolved argument "${SEGMENT_IO_TOKEN}": use -DSEGMENT_IO_TOKEN=value to set the argument
	${SEGMENT_IO_TOKEN} appears in components/installation-telemetry:app


time="2023-05-12T02:14:56Z" level=fatal msg="cannot build with unresolved argument \"${SEGMENT_IO_TOKEN}\": use -DSEGMENT_IO_TOKEN=value to set the argument\n\t${SEGMENT_IO_TOKEN} appears in components/installation-telemetry:app\n\n"
leeway build components/ipfs/ipfs-cluster:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/ipfs/ipfs-cluster:docker  [90m(version 333fd92944461b38589eab4283b40ef71d934003)[0m


[0;32mbuild succeded[0m
leeway build components/ipfs/kubo:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/ipfs/kubo:docker  [90m(version aea0b0d2be38d5e6fc3078c748b84af50367a987)[0m


[0;32mbuild succeded[0m
leeway build components/kots-config-check/certificate:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/kots-config-check/certificate:docker  [90m(version 5036fd1ba8921630a18cac8052b458d6a5a95ddc)[0m


[0;32mbuild succeded[0m
leeway build components/kots-config-check/database:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/kots-config-check/database:docker  [90m(version 987db23e1ecc2d9e7b1e4a855306f7958b478b76)[0m


[0;32mbuild succeded[0m
leeway build components/kots-config-check/registry:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/kots-config-check/registry:app     [90m(version a9893d222ea5f6c55c4b686a03c232a378894953)[0m
[32mðŸ“¦  cached locally[0m  components/kots-config-check/registry:docker  [90m(version 9e2a09c1863f22307d6e66819261e1c6b7bdcf9f)[0m


[0;32mbuild succeded[0m
leeway build components/kots-config-check/storage:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/kots-config-check/storage:docker  [90m(version 2c0cb42421ca12fa05dcf4662638107716d454b3)[0m


[0;32mbuild succeded[0m
leeway build components/local-app:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/gitpod-protocol:gitpod-schema  [90m(version 3832e8872d751eca5bd2028c5a907c6b266c75c3)[0m
[32mðŸ“¦  cached locally[0m  components/supervisor-api/go:lib          [90m(version 6505b1a01e6e7b434713f4944dcab84b18d89b56)[0m
[32mðŸ“¦  cached locally[0m  dev/addlicense:app                        [90m(version c322ba901584f00744aef2db3f81d8d0e5c0512b)[0m
[33mðŸ”§  build[0m           components/gitpod-protocol/go:lib         [90m(version a6620338e66a1e62fedeb9ada5bcce1af997b154)[0m
[33mðŸ”§  build[0m           components/local-app-api/go:lib           [90m(version 5869e0fd0dc08075bb1cf8c5868778f9ef9d9447)[0m
[33mðŸ”§  build[0m           components/local-app:app                  [90m(version f3225fa6cfc8420740f0773df30fc382498ccf85)[0m
[33mðŸ”§  build[0m           components/local-app:app-darwin-amd64     [90m(version 6f9be86905ea59fa233972cd3b06cda9350006fe)[0m
[33mðŸ”§  build[0m           components/local-app:app-darwin-arm64     [90m(version 9d877fdfa3128cf531bb3e09957b6a2b307c8aac)[0m
[33mðŸ”§  build[0m           components/local-app:app-linux-amd64      [90m(version a267f5afd7f3eaae12593f36c2e5e8c3c8e0383c)[0m
[33mðŸ”§  build[0m           components/local-app:app-linux-arm64      [90m(version be516234a535a9a5097a57eeebe6edd600e289a8)[0m
[33mðŸ”§  build[0m           components/local-app:app-windows-386      [90m(version f07366130e0ef9b3510e7403dfe9298b40fb13d8)[0m
[33mðŸ”§  build[0m           components/local-app:app-windows-amd64    [90m(version d893b695aecb3b2d0cb28f45d842242715c7bdda)[0m
[33mðŸ”§  build[0m           components/local-app:app-windows-arm64    [90m(version 865e1e61a1f1f3ea518cd14dbdd74ce59680b51d)[0m
[33mðŸ”§  build[0m           components/local-app:docker               [90m(version 8d930608f3821fe398be1413badb54534099002e)[0m

[90m[components/gitpod-protocol/go:lib] [0m[33mbuild started[0m [0;90m(version a6620338e66a1e62fedeb9ada5bcce1af997b154)[0m
[90m[components/local-app-api/go:lib] [0m[33mbuild started[0m [0;90m(version 5869e0fd0dc08075bb1cf8c5868778f9ef9d9447)[0m
[90m[components/gitpod-protocol/go:lib] [0mComponent Path: ./scripts/..
[90m[components/gitpod-protocol/go:lib] [0mConfig Path: ./_deps/components-gitpod-protocol--gitpod-schema/gitpod-schema.json
[90m[components/gitpod-protocol/go:lib] [0mConfig Types Path: ./scripts/../gitpod-config-types.go
[90m[components/local-app-api/go:lib] [0mlevel=error msg="[linters_context] typechecking error: pattern ./...: directory prefix . does not contain main module or its selected dependencies"
[90m[components/local-app-api/go:lib] [0m[0;31mpackage build failed[0m
[90m[components/local-app-api/go:lib] [0m[1;37mReason:[0m exit status 7
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:15:16Z" level=fatal msg="build failed"
leeway build components/node-labeler:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib        [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/node-labeler:app     [90m(version 63505a04c1ac91a0cd70ed032cd17e2ec101852e)[0m
[32mðŸ“¦  cached locally[0m  components/node-labeler:docker  [90m(version e64ceae903009fd77a4f03bf3b86d4b6aa830d4d)[0m


[0;32mbuild succeded[0m
leeway build components/openvsx-proxy:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib         [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/openvsx-proxy:app     [90m(version 7a532f216f2c9217019f3bd5a187ae9af784ad6c)[0m
[32mðŸ“¦  cached locally[0m  components/openvsx-proxy:docker  [90m(version 94f03f0d116eb9f5f98727d89d488c768701d929)[0m


[0;32mbuild succeded[0m
leeway build components/proxy:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/proxy:docker  [90m(version 7a13f2f07c643d550bdae7063274620314780642)[0m


[0;32mbuild succeded[0m
leeway build components/public-api-server:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib                                               [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-db:migrations                                        [90m(version 34f80a73a6c06eda6f683bc8c8df805c6cf4c555)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-protocol:gitpod-schema                               [90m(version 3832e8872d751eca5bd2028c5a907c6b266c75c3)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-protocol:lib                                         [90m(version 6f50f84f6d574c1dae5f44fabf7fd3a6af9537d1)[0m
[32mðŸ“¦  cached locally[0m  dev/addlicense:app                                                     [90m(version c322ba901584f00744aef2db3f81d8d0e5c0512b)[0m
[32mðŸ“¦  cached locally[0m  install/installer/pkg/components/database/incluster/init:init-scripts  [90m(version bfc7aeeb1b4f5ca32780f466121a28417564d532)[0m
[33mðŸ”§  build[0m           components/gitpod-db/go:init-testdb                                    [90m(version a23666c1719945f81b9d5f2dfa23af1e76ead3a5)[0m
[33mðŸ”§  build[0m           components/gitpod-db/go:lib                                            [90m(version 8c71f1cc89ab8fb5865e75dd8f018694a0124daa)[0m
[33mðŸ”§  build[0m           components/gitpod-db:dbtest-init                                       [90m(version 05c1fd0eb1ccd73b78cd93ef5a1ee7e91792cd7f)[0m
[33mðŸ”§  build[0m           components/gitpod-protocol/go:lib                                      [90m(version a6620338e66a1e62fedeb9ada5bcce1af997b154)[0m
[33mðŸ”§  build[0m           components/public-api-server:app                                       [90m(version ab21af8956e7148569b91f011215c418aadd97e8)[0m
[33mðŸ”§  build[0m           components/public-api-server:docker                                    [90m(version 18b357d5ddbd7082b919e630f1d004df8837c51c)[0m
[33mðŸ”§  build[0m           components/public-api/go:lib                                           [90m(version 8d5ba224c77ed3f80025ab3d7d81e3b10d52a605)[0m
[33mðŸ”§  build[0m           components/usage-api/go:lib                                            [90m(version d09cdbe585fb1443aa98dc8166c76771b26cda54)[0m

[90m[components/gitpod-protocol/go:lib] [0m[33mbuild started[0m [0;90m(version a6620338e66a1e62fedeb9ada5bcce1af997b154)[0m
[90m[components/public-api/go:lib] [0m[33mbuild started[0m [0;90m(version 8d5ba224c77ed3f80025ab3d7d81e3b10d52a605)[0m
[90m[components/gitpod-db:dbtest-init] [0m[33mbuild started[0m [0;90m(version 05c1fd0eb1ccd73b78cd93ef5a1ee7e91792cd7f)[0m
[90m[components/usage-api/go:lib] [0m[33mbuild started[0m [0;90m(version d09cdbe585fb1443aa98dc8166c76771b26cda54)[0m
[90m[components/gitpod-protocol/go:lib] [0mComponent Path: ./scripts/..
[90m[components/gitpod-protocol/go:lib] [0mConfig Path: ./_deps/components-gitpod-protocol--gitpod-schema/gitpod-schema.json
[90m[components/gitpod-protocol/go:lib] [0mConfig Types Path: ./scripts/../gitpod-config-types.go
[90m[components/gitpod-db:dbtest-init] [0mmysql: [Warning] Using a password on the command line interface can be insecure.
[90m[components/gitpod-db:dbtest-init] [0mERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)
[90m[components/gitpod-db:dbtest-init] [0m[0;31mpackage build failed[0m
[90m[components/gitpod-db:dbtest-init] [0m[1;37mReason:[0m exit status 1
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:15:21Z" level=fatal msg="build failed"
leeway build components/registry-facade:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib               [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/registry-facade-api/go:lib  [90m(version 11d9730b48b27fad322e28b6a16b495e98e43527)[0m
[33mðŸ”§  build[0m           components/registry-facade:app         [90m(version a03c2dac79397353b8eb20b98248bf956f2f2ffe)[0m
[33mðŸ”§  build[0m           components/registry-facade:docker      [90m(version 83025b7788d95a6338bd99da47e7ab480865a2ba)[0m

[90m[components/registry-facade:app] [0m[33mbuild started[0m [0;90m(version a03c2dac79397353b8eb20b98248bf956f2f2ffe)[0m
[90m[components/registry-facade:app] [0m# github.com/lucas-clemente/quic-go/internal/qtls
[90m[components/registry-facade:app] [0m/root/go/pkg/mod/github.com/lucas-clemente/quic-go@v0.29.1/internal/qtls/go120.go:5:13: cannot use "The version of quic-go you're using can't be built on Go 1.20 yet. For more details, please see https://github.com/lucas-clemente/quic-go/wiki/quic-go-and-Go-versions." (untyped string constant "The version of quic-go you're using can't be built on Go 1.20 yet. F...) as int value in variable declaration
[90m[components/registry-facade:app] [0m?   	github.com/gitpod-io/gitpod/registry-facade	[no test files]
[90m[components/registry-facade:app] [0m?   	github.com/gitpod-io/gitpod/registry-facade/cmd	[no test files]
[90m[components/registry-facade:app] [0m?   	github.com/gitpod-io/gitpod/registry-facade/pkg/registry/mock	[no test files]
[90m[components/registry-facade:app] [0mFAIL	github.com/gitpod-io/gitpod/registry-facade/pkg/registry [build failed]
[90m[components/registry-facade:app] [0mFAIL
[90m[components/registry-facade:app] [0m[0;31mpackage build failed[0m
[90m[components/registry-facade:app] [0m[1;37mReason:[0m exit status 1
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:15:33Z" level=fatal msg="build failed"
leeway build components/server:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/content-service-api/typescript:lib     [90m(version c71a29d0b6ae107f0aab9d73f018d87f6b7b8582)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-db:lib                          [90m(version 38d74d9aef02665fba03036289a3b12c241d21dd)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-messagebus:lib                  [90m(version c7668ac9d5b02ee05bd39f17054bba4dcbfdb780)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-protocol:lib                    [90m(version 6f50f84f6d574c1dae5f44fabf7fd3a6af9537d1)[0m
[32mðŸ“¦  cached locally[0m  components/ide-service-api/typescript:lib         [90m(version 6d35d7e42890aaaad38fc5dee2c8771bd6630954)[0m
[32mðŸ“¦  cached locally[0m  components/image-builder-api/typescript:lib       [90m(version 73db923ac5e65792066d68e65781554731285296)[0m
[32mðŸ“¦  cached locally[0m  components/public-api/typescript:lib              [90m(version 7a7d860801660f8e249d23ef7840745c85733143)[0m
[32mðŸ“¦  cached locally[0m  components/server:app                             [90m(version 7550922dd39aba7dea07492653967be8454a887f)[0m
[32mðŸ“¦  cached locally[0m  components/server:docker                          [90m(version 7ba6eca8369d37021399cabf51c0563901308d08)[0m
[32mðŸ“¦  cached locally[0m  components/supervisor-api/typescript-grpcweb:lib  [90m(version 1389d08c659682be2f91d995f72db43d07246314)[0m
[32mðŸ“¦  cached locally[0m  components/supervisor-api:proto                   [90m(version 5924ccc83491010c6320701882875f8807d6880c)[0m
[32mðŸ“¦  cached locally[0m  components/usage-api/typescript:lib               [90m(version 12a1dfb878ee98ce37f95536a46e861de03a46d2)[0m
[32mðŸ“¦  cached locally[0m  components/ws-manager-api/typescript:lib          [90m(version 3c407f78de6991d3fccfb6af70eb6bfda0bef644)[0m


[0;32mbuild succeded[0m
leeway build components/service-waiter:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib          [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/service-waiter:app     [90m(version 3b3804ba2b777623c8382726a3f4d28eaac48975)[0m
[32mðŸ“¦  cached locally[0m  components/service-waiter:docker  [90m(version 2bad6ee4db97b9ccc28f9f7a33153c742ab871f7)[0m


[0;32mbuild succeded[0m
leeway build components/supervisor:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib                           [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/content-service-api/go:lib              [90m(version 96c22b2ddc7509c580fb952baff56c3a8bfd632d)[0m
[32mðŸ“¦  cached locally[0m  components/content-service:lib                     [90m(version b0cd0898613468d7c336a07949eab1a254208889)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-protocol:gitpod-schema           [90m(version 3832e8872d751eca5bd2028c5a907c6b266c75c3)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-protocol:lib                     [90m(version 6f50f84f6d574c1dae5f44fabf7fd3a6af9537d1)[0m
[32mðŸ“¦  cached locally[0m  components/ide-metrics-api:proto                   [90m(version 83ee761f7c0245453e1e4ccfa8ac2dd31adebec3)[0m
[32mðŸ“¦  cached locally[0m  components/supervisor-api/go:lib                   [90m(version 6505b1a01e6e7b434713f4944dcab84b18d89b56)[0m
[32mðŸ“¦  cached locally[0m  components/supervisor-api:proto                    [90m(version 5924ccc83491010c6320701882875f8807d6880c)[0m
[32mðŸ“¦  cached locally[0m  components/ws-daemon-api/go:lib                    [90m(version 50668ec3ec5e31f546c2466c6eb5bd5cf37f52c6)[0m
[32mðŸ“¦  cached locally[0m  dev/addlicense:app                                 [90m(version c322ba901584f00744aef2db3f81d8d0e5c0512b)[0m
[33mðŸ”§  build[0m           components/gitpod-cli:app                          [90m(version 85369b3e17d173785e1548bccc9ee2ebcffe1ccb)[0m
[33mðŸ”§  build[0m           components/gitpod-protocol/go:lib                  [90m(version a6620338e66a1e62fedeb9ada5bcce1af997b154)[0m
[33mðŸ”§  build[0m           components/ide-metrics-api/go:lib                  [90m(version f9c615104ee778b8a85dacd3ff33c37bf1752d75)[0m
[33mðŸ”§  build[0m           components/ide-metrics-api/typescript-grpcweb:lib  [90m(version 8344948665f3c85e26e1385d5723e12aab0adc7b)[0m
[33mðŸ”§  build[0m           components/public-api/go:lib                       [90m(version 8d5ba224c77ed3f80025ab3d7d81e3b10d52a605)[0m
[33mðŸ”§  build[0m           components/supervisor-api/typescript-grpc:lib      [90m(version 5d00de98b3c86f4b59738fe59d7316736981f051)[0m
[33mðŸ”§  build[0m           components/supervisor/frontend:app                 [90m(version 25bb81cd05ffc4ac0e685ac67b8d8167a6bf7cf6)[0m
[33mðŸ”§  build[0m           components/supervisor/openssh:app                  [90m(version 29a3572cc3f6afc5e80d9b9636436ed6cc31cfdd)[0m
[33mðŸ”§  build[0m           components/supervisor/openssh:docker-build         [90m(version fd53302ed0931f883f200b955ee8474c49b4b875)[0m
[33mðŸ”§  build[0m           components/supervisor:app                          [90m(version 5062cbda0d2283e06954e1816a86349d68913068)[0m
[33mðŸ”§  build[0m           components/supervisor:docker                       [90m(version 5fc7ff4c78585183e09a1a876513c5b0cc05bd3d)[0m

[90m[components/supervisor/openssh:docker-build] [0m[33mbuild started[0m [0;90m(version fd53302ed0931f883f200b955ee8474c49b4b875)[0m
[90m[components/supervisor-api/typescript-grpc:lib] [0m[33mbuild started[0m [0;90m(version 5d00de98b3c86f4b59738fe59d7316736981f051)[0m
[90m[components/gitpod-protocol/go:lib] [0m[33mbuild started[0m [0;90m(version a6620338e66a1e62fedeb9ada5bcce1af997b154)[0m
[90m[components/ide-metrics-api/typescript-grpcweb:lib] [0m[33mbuild started[0m [0;90m(version 8344948665f3c85e26e1385d5723e12aab0adc7b)[0m
[90m[components/ide-metrics-api/go:lib] [0m[33mbuild started[0m [0;90m(version f9c615104ee778b8a85dacd3ff33c37bf1752d75)[0m
[90m[components/public-api/go:lib] [0m[33mbuild started[0m [0;90m(version 8d5ba224c77ed3f80025ab3d7d81e3b10d52a605)[0m
[90m[components/ide-metrics-api/typescript-grpcweb:lib] [0myarn install v1.22.19
[90m[components/supervisor-api/typescript-grpc:lib] [0myarn install v1.22.19
[90m[components/gitpod-protocol/go:lib] [0mComponent Path: ./scripts/..
[90m[components/gitpod-protocol/go:lib] [0mConfig Path: ./_deps/components-gitpod-protocol--gitpod-schema/gitpod-schema.json
[90m[components/gitpod-protocol/go:lib] [0mConfig Types Path: ./scripts/../gitpod-config-types.go
[90m[components/ide-metrics-api/typescript-grpcweb:lib] [0mwarning Waiting for the other yarn instance to finish (649387)
[90m[components/supervisor-api/typescript-grpc:lib] [0m[1/4] Resolving packages...
[90m[components/supervisor-api/typescript-grpc:lib] [0m[2/4] Fetching packages...
[90m[components/gitpod-protocol/go:lib] [0m./scripts/generate-config.sh: line 26: schema-generate: command not found
[90m[components/gitpod-protocol/go:lib] [0m./scripts/../gitpod-config-types.go:1:1: expected 'package', found 'EOF'
[90m[components/gitpod-protocol/go:lib] [0mdiff --git a/gitpod-config-types.go b/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0mindex f563ead..cddd97f 100644
[90m[components/gitpod-protocol/go:lib] [0m--- a/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m+++ b/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m@@ -2,224 +2,3 @@
[90m[components/gitpod-protocol/go:lib] [0m // Licensed under the GNU Affero General Public License (AGPL).
[90m[components/gitpod-protocol/go:lib] [0m // See License.AGPL.txt in the project root for license information.
[90m[components/gitpod-protocol/go:lib] [0m 
[90m[components/gitpod-protocol/go:lib] [0m-// Code generated by schema-generate. DO NOT EDIT.
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-package protocol
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// AdditionalRepositoriesItems
[90m[components/gitpod-protocol/go:lib] [0m-type AdditionalRepositoriesItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the repository should be checked out relative to `/workspace`. Defaults to the simple repository name.
[90m[components/gitpod-protocol/go:lib] [0m-	CheckoutLocation string `yaml:"checkoutLocation,omitempty" json:"checkoutLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The url of the git repository to clone. Supports any context URLs.
[90m[components/gitpod-protocol/go:lib] [0m-	Url string `yaml:"url" json:"url"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// CoreDump Configure the default action of certain signals is to cause a process to terminate and produce a core dump file, a file containing an image of the process's memory at the time of termination. Disabled by default.
[90m[components/gitpod-protocol/go:lib] [0m-type CoreDump struct {
[90m[components/gitpod-protocol/go:lib] [0m-	Enabled bool `yaml:"enabled,omitempty" json:"enabled,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// the hard limit acts as a ceiling for the soft limit. For more details please check https://man7.org/linux/man-pages/man2/getrlimit.2.html
[90m[components/gitpod-protocol/go:lib] [0m-	HardLimit float64 `yaml:"hardLimit,omitempty" json:"hardLimit,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// upper limit on the size of the core dump file that will be produced if it receives a core dump signal
[90m[components/gitpod-protocol/go:lib] [0m-	SoftLimit float64 `yaml:"softLimit,omitempty" json:"softLimit,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Env Environment variables to set.
[90m[components/gitpod-protocol/go:lib] [0m-type Env struct {
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Github Configures Gitpod's GitHub app
[90m[components/gitpod-protocol/go:lib] [0m-type Github struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Set to true to enable workspace prebuilds, false to disable them. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuilds interface{} `yaml:"prebuilds,omitempty" json:"prebuilds,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// GitpodConfig
[90m[components/gitpod-protocol/go:lib] [0m-type GitpodConfig struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of additional repositories that are part of this project.
[90m[components/gitpod-protocol/go:lib] [0m-	AdditionalRepositories []*AdditionalRepositoriesItems `yaml:"additionalRepositories,omitempty" json:"additionalRepositories,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the repository should be checked out relative to `/workspace`. Defaults to the simple repository name.
[90m[components/gitpod-protocol/go:lib] [0m-	CheckoutLocation string `yaml:"checkoutLocation,omitempty" json:"checkoutLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure the default action of certain signals is to cause a process to terminate and produce a core dump file, a file containing an image of the process's memory at the time of termination. Disabled by default.
[90m[components/gitpod-protocol/go:lib] [0m-	CoreDump *CoreDump `yaml:"coreDump,omitempty" json:"coreDump,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Experimental network configuration in workspaces (deprecated). Enabled by default
[90m[components/gitpod-protocol/go:lib] [0m-	ExperimentalNetwork bool `yaml:"experimentalNetwork,omitempty" json:"experimentalNetwork,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Git config values should be provided in pairs. E.g. `core.autocrlf: input`. See https://git-scm.com/docs/git-config#_values.
[90m[components/gitpod-protocol/go:lib] [0m-	GitConfig map[string]string `yaml:"gitConfig,omitempty" json:"gitConfig,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configures Gitpod's GitHub app
[90m[components/gitpod-protocol/go:lib] [0m-	Github *Github `yaml:"github,omitempty" json:"github,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The Docker image to run your workspace in.
[90m[components/gitpod-protocol/go:lib] [0m-	Image interface{} `yaml:"image,omitempty" json:"image,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure JetBrains integration
[90m[components/gitpod-protocol/go:lib] [0m-	Jetbrains *Jetbrains `yaml:"jetbrains,omitempty" json:"jetbrains,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The main repository, containing the dev environment configuration.
[90m[components/gitpod-protocol/go:lib] [0m-	MainConfiguration string `yaml:"mainConfiguration,omitempty" json:"mainConfiguration,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of exposed ports.
[90m[components/gitpod-protocol/go:lib] [0m-	Ports []*PortsItems `yaml:"ports,omitempty" json:"ports,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of tasks to run on start. Each task will open a terminal in the IDE.
[90m[components/gitpod-protocol/go:lib] [0m-	Tasks []*TasksItems `yaml:"tasks,omitempty" json:"tasks,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure VS Code integration
[90m[components/gitpod-protocol/go:lib] [0m-	Vscode *Vscode `yaml:"vscode,omitempty" json:"vscode,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the IDE's workspace should be opened. Supports vscode's `*.code-workspace` files.
[90m[components/gitpod-protocol/go:lib] [0m-	WorkspaceLocation string `yaml:"workspaceLocation,omitempty" json:"workspaceLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Image_object The Docker image to run your workspace in.
[90m[components/gitpod-protocol/go:lib] [0m-type Image_object struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Relative path to the context path (optional). Should only be set if you need to copy files into the image.
[90m[components/gitpod-protocol/go:lib] [0m-	Context string `yaml:"context,omitempty" json:"context,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Relative path to a docker file.
[90m[components/gitpod-protocol/go:lib] [0m-	File string `yaml:"file" json:"file"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Jetbrains Configure JetBrains integration
[90m[components/gitpod-protocol/go:lib] [0m-type Jetbrains struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure CLion integration
[90m[components/gitpod-protocol/go:lib] [0m-	Clion *JetbrainsProduct `yaml:"clion,omitempty" json:"clion,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure GoLand integration
[90m[components/gitpod-protocol/go:lib] [0m-	Goland *JetbrainsProduct `yaml:"goland,omitempty" json:"goland,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure IntelliJ integration
[90m[components/gitpod-protocol/go:lib] [0m-	Intellij *JetbrainsProduct `yaml:"intellij,omitempty" json:"intellij,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure PhpStorm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Phpstorm *JetbrainsProduct `yaml:"phpstorm,omitempty" json:"phpstorm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of plugins which should be installed for all JetBrains product for users of this workspace. From the JetBrains Marketplace page, find a page of the required plugin, select 'Versions' tab, click any version to copy pluginId (short name such as org.rust.lang) of the plugin you want to install.
[90m[components/gitpod-protocol/go:lib] [0m-	Plugins []string `yaml:"plugins,omitempty" json:"plugins,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure PyCharm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Pycharm *JetbrainsProduct `yaml:"pycharm,omitempty" json:"pycharm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure Rider integration
[90m[components/gitpod-protocol/go:lib] [0m-	Rider *JetbrainsProduct `yaml:"rider,omitempty" json:"rider,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure RubyMine integration
[90m[components/gitpod-protocol/go:lib] [0m-	Rubymine *JetbrainsProduct `yaml:"rubymine,omitempty" json:"rubymine,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure WebStorm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Webstorm *JetbrainsProduct `yaml:"webstorm,omitempty" json:"webstorm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// JetbrainsProduct
[90m[components/gitpod-protocol/go:lib] [0m-type JetbrainsProduct struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of plugins which should be installed for users of this workspace. From the JetBrains Marketplace page, find a page of the required plugin, select 'Versions' tab, click any version to copy pluginId (short name such as org.rust.lang) of the plugin you want to install.
[90m[components/gitpod-protocol/go:lib] [0m-	Plugins []string `yaml:"plugins,omitempty" json:"plugins,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable warming up of JetBrains backend in prebuilds.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuilds *Prebuilds `yaml:"prebuilds,omitempty" json:"prebuilds,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure JVM options, for instance '-Xmx=4096m'.
[90m[components/gitpod-protocol/go:lib] [0m-	Vmoptions string `yaml:"vmoptions,omitempty" json:"vmoptions,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// PortsItems
[90m[components/gitpod-protocol/go:lib] [0m-type PortsItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A description to identify what is this port used for.
[90m[components/gitpod-protocol/go:lib] [0m-	Description string `yaml:"description,omitempty" json:"description,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Port name.
[90m[components/gitpod-protocol/go:lib] [0m-	Name string `yaml:"name,omitempty" json:"name,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// What to do when a service on this port was detected. 'notify' (default) will show a notification asking the user what to do. 'open-browser' will open a new browser tab. 'open-preview' will open in the preview on the right of the IDE. 'ignore' will do nothing.
[90m[components/gitpod-protocol/go:lib] [0m-	OnOpen string `yaml:"onOpen,omitempty" json:"onOpen,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The port number (e.g. 1337) or range (e.g. 3000-3999) to expose.
[90m[components/gitpod-protocol/go:lib] [0m-	Port interface{} `yaml:"port" json:"port"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The protocol to be used. (deprecated)
[90m[components/gitpod-protocol/go:lib] [0m-	Protocol string `yaml:"protocol,omitempty" json:"protocol,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Whether the port visibility should be private or public. 'private' (default) will only allow users with workspace access to access the port. 'public' will allow everyone with the port URL to access the port.
[90m[components/gitpod-protocol/go:lib] [0m-	Visibility string `yaml:"visibility,omitempty" json:"visibility,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Prebuilds Enable warming up of JetBrains backend in prebuilds.
[90m[components/gitpod-protocol/go:lib] [0m-type Prebuilds struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Whether only stable, latest or both versions should be warmed up. Default is stable only.
[90m[components/gitpod-protocol/go:lib] [0m-	Version string `yaml:"version,omitempty" json:"version,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Prebuilds_object Set to true to enable workspace prebuilds, false to disable them. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-type Prebuilds_object struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a Review in Gitpod badge to pull requests. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	AddBadge bool `yaml:"addBadge,omitempty" json:"addBadge,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a commit check to pull requests. Set to 'fail-on-error' if you want broken prebuilds to block merging. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	AddCheck interface{} `yaml:"addCheck,omitempty" json:"addCheck,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a label to a PR when it's prebuilt. Set to true to use the default label (prebuilt-in-gitpod) or set to a string to use a different label name. This is a beta feature and may be unreliable. Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	AddLabel interface{} `yaml:"addLabel,omitempty" json:"addLabel,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for all branches. Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	Branches bool `yaml:"branches,omitempty" json:"branches,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for the default branch (typically master). Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	Master bool `yaml:"master,omitempty" json:"master,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for pull-requests from the original repo. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	PullRequests bool `yaml:"pullRequests,omitempty" json:"pullRequests,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for pull-requests from any repo (e.g. from forks). Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	PullRequestsFromForks bool `yaml:"pullRequestsFromForks,omitempty" json:"pullRequestsFromForks,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// TasksItems
[90m[components/gitpod-protocol/go:lib] [0m-type TasksItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run before `init` and the main `command`. This command is executed on every start and is expected to terminate. If it fails, the following commands will not be executed.
[90m[components/gitpod-protocol/go:lib] [0m-	Before string `yaml:"before,omitempty" json:"before,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The main shell command to run after `before` and `init`. This command is executed last on every start and doesn't have to terminate.
[90m[components/gitpod-protocol/go:lib] [0m-	Command string `yaml:"command,omitempty" json:"command,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Environment variables to set.
[90m[components/gitpod-protocol/go:lib] [0m-	Env *Env `yaml:"env,omitempty" json:"env,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run between `before` and the main `command`. This command is executed only on after initializing a workspace with a fresh clone, but not on restarts and snapshots. This command is expected to terminate. If it fails, the `command` property will not be executed.
[90m[components/gitpod-protocol/go:lib] [0m-	Init string `yaml:"init,omitempty" json:"init,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Name of the task. Shown on the tab of the opened terminal.
[90m[components/gitpod-protocol/go:lib] [0m-	Name string `yaml:"name,omitempty" json:"name,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The panel/area where to open the terminal. Default is 'bottom' panel.
[90m[components/gitpod-protocol/go:lib] [0m-	OpenIn string `yaml:"openIn,omitempty" json:"openIn,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The opening mode. Default is 'tab-after'.
[90m[components/gitpod-protocol/go:lib] [0m-	OpenMode string `yaml:"openMode,omitempty" json:"openMode,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run after `before`. This command is executed only on during workspace prebuilds. This command is expected to terminate. If it fails, the workspace build fails.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuild string `yaml:"prebuild,omitempty" json:"prebuild,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Vscode Configure VS Code integration
[90m[components/gitpod-protocol/go:lib] [0m-type Vscode struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of extensions which should be installed for users of this workspace. The identifier of an extension is always '${publisher}.${name}'. For example: 'vscode.csharp'.
[90m[components/gitpod-protocol/go:lib] [0m-	Extensions []string `yaml:"extensions,omitempty" json:"extensions,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m[0;31mpackage build failed[0m
[90m[components/gitpod-protocol/go:lib] [0m[1;37mReason:[0m exit status 1
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:15:40Z" level=fatal msg="build failed"
leeway build components/usage:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib                                               [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/content-service-api/go:lib                                  [90m(version 96c22b2ddc7509c580fb952baff56c3a8bfd632d)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-db:migrations                                        [90m(version 34f80a73a6c06eda6f683bc8c8df805c6cf4c555)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-protocol:lib                                         [90m(version 6f50f84f6d574c1dae5f44fabf7fd3a6af9537d1)[0m
[32mðŸ“¦  cached locally[0m  install/installer/pkg/components/database/incluster/init:init-scripts  [90m(version bfc7aeeb1b4f5ca32780f466121a28417564d532)[0m
[33mðŸ”§  build[0m           components/gitpod-db/go:init-testdb                                    [90m(version a23666c1719945f81b9d5f2dfa23af1e76ead3a5)[0m
[33mðŸ”§  build[0m           components/gitpod-db/go:lib                                            [90m(version 8c71f1cc89ab8fb5865e75dd8f018694a0124daa)[0m
[33mðŸ”§  build[0m           components/gitpod-db:dbtest-init                                       [90m(version 05c1fd0eb1ccd73b78cd93ef5a1ee7e91792cd7f)[0m
[33mðŸ”§  build[0m           components/public-api/go:lib                                           [90m(version 8d5ba224c77ed3f80025ab3d7d81e3b10d52a605)[0m
[33mðŸ”§  build[0m           components/usage-api/go:lib                                            [90m(version d09cdbe585fb1443aa98dc8166c76771b26cda54)[0m
[33mðŸ”§  build[0m           components/usage:app                                                   [90m(version 642f4006fc15be3e6f838cfbb86be424bed2f4c0)[0m
[33mðŸ”§  build[0m           components/usage:docker                                                [90m(version e45ad95e75f6343663df9ca39cbd0e223519d836)[0m

[90m[components/usage-api/go:lib] [0m[33mbuild started[0m [0;90m(version d09cdbe585fb1443aa98dc8166c76771b26cda54)[0m
[90m[components/gitpod-db:dbtest-init] [0m[33mbuild started[0m [0;90m(version 05c1fd0eb1ccd73b78cd93ef5a1ee7e91792cd7f)[0m
[90m[components/public-api/go:lib] [0m[33mbuild started[0m [0;90m(version 8d5ba224c77ed3f80025ab3d7d81e3b10d52a605)[0m
[90m[components/gitpod-db:dbtest-init] [0mmysql: [Warning] Using a password on the command line interface can be insecure.
[90m[components/gitpod-db:dbtest-init] [0mERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)
[90m[components/gitpod-db:dbtest-init] [0m[0;31mpackage build failed[0m
[90m[components/gitpod-db:dbtest-init] [0m[1;37mReason:[0m exit status 1
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:15:42Z" level=fatal msg="build failed"
leeway build components/workspace-rollout-job:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib                  [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/content-service-api/go:lib     [90m(version 96c22b2ddc7509c580fb952baff56c3a8bfd632d)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-protocol:gitpod-schema  [90m(version 3832e8872d751eca5bd2028c5a907c6b266c75c3)[0m
[32mðŸ“¦  cached locally[0m  components/image-builder-api/go:lib       [90m(version f569f4c7ed2550ed9c4c7109c92f4e1ee0768739)[0m
[32mðŸ“¦  cached locally[0m  components/registry-facade-api/go:lib     [90m(version 11d9730b48b27fad322e28b6a16b495e98e43527)[0m
[32mðŸ“¦  cached locally[0m  components/ws-daemon-api/go:lib           [90m(version 50668ec3ec5e31f546c2466c6eb5bd5cf37f52c6)[0m
[32mðŸ“¦  cached locally[0m  components/ws-manager-api/go:lib          [90m(version d89281deca1e97571505c1d2d858062eab5c5d01)[0m
[32mðŸ“¦  cached locally[0m  dev/addlicense:app                        [90m(version c322ba901584f00744aef2db3f81d8d0e5c0512b)[0m
[33mðŸ”§  build[0m           components/gitpod-protocol/go:lib         [90m(version a6620338e66a1e62fedeb9ada5bcce1af997b154)[0m
[33mðŸ”§  build[0m           components/public-api/go:lib              [90m(version 8d5ba224c77ed3f80025ab3d7d81e3b10d52a605)[0m
[33mðŸ”§  build[0m           components/workspace-rollout-job:app      [90m(version 48d40a4f53b83a16c63f14f1dbb4b8006da6b6ed)[0m
[33mðŸ”§  build[0m           components/workspace-rollout-job:docker   [90m(version b090c659134acd7936e6e9a781518b17de5f2725)[0m
[33mðŸ”§  build[0m           components/ws-manager-bridge-api/go:lib   [90m(version 48a512925b8b34a5753e7927b0dc60996446e00e)[0m
[33mðŸ”§  build[0m           dev/gpctl:lib                             [90m(version 452b873c8cb1043ad47e14d43e8520d91878d4da)[0m

[90m[components/ws-manager-bridge-api/go:lib] [0m[33mbuild started[0m [0;90m(version 48a512925b8b34a5753e7927b0dc60996446e00e)[0m
[90m[components/public-api/go:lib] [0m[33mbuild started[0m [0;90m(version 8d5ba224c77ed3f80025ab3d7d81e3b10d52a605)[0m
[90m[components/gitpod-protocol/go:lib] [0m[33mbuild started[0m [0;90m(version a6620338e66a1e62fedeb9ada5bcce1af997b154)[0m
[90m[components/gitpod-protocol/go:lib] [0mComponent Path: ./scripts/..
[90m[components/gitpod-protocol/go:lib] [0mConfig Path: ./_deps/components-gitpod-protocol--gitpod-schema/gitpod-schema.json
[90m[components/gitpod-protocol/go:lib] [0mConfig Types Path: ./scripts/../gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m./scripts/generate-config.sh: line 26: schema-generate: command not found
[90m[components/gitpod-protocol/go:lib] [0m./scripts/../gitpod-config-types.go:1:1: expected 'package', found 'EOF'
[90m[components/gitpod-protocol/go:lib] [0mdiff --git a/gitpod-config-types.go b/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0mindex f563ead..cddd97f 100644
[90m[components/gitpod-protocol/go:lib] [0m--- a/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m+++ b/gitpod-config-types.go
[90m[components/gitpod-protocol/go:lib] [0m@@ -2,224 +2,3 @@
[90m[components/gitpod-protocol/go:lib] [0m // Licensed under the GNU Affero General Public License (AGPL).
[90m[components/gitpod-protocol/go:lib] [0m // See License.AGPL.txt in the project root for license information.
[90m[components/gitpod-protocol/go:lib] [0m 
[90m[components/gitpod-protocol/go:lib] [0m-// Code generated by schema-generate. DO NOT EDIT.
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-package protocol
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// AdditionalRepositoriesItems
[90m[components/gitpod-protocol/go:lib] [0m-type AdditionalRepositoriesItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the repository should be checked out relative to `/workspace`. Defaults to the simple repository name.
[90m[components/gitpod-protocol/go:lib] [0m-	CheckoutLocation string `yaml:"checkoutLocation,omitempty" json:"checkoutLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The url of the git repository to clone. Supports any context URLs.
[90m[components/gitpod-protocol/go:lib] [0m-	Url string `yaml:"url" json:"url"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// CoreDump Configure the default action of certain signals is to cause a process to terminate and produce a core dump file, a file containing an image of the process's memory at the time of termination. Disabled by default.
[90m[components/gitpod-protocol/go:lib] [0m-type CoreDump struct {
[90m[components/gitpod-protocol/go:lib] [0m-	Enabled bool `yaml:"enabled,omitempty" json:"enabled,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// the hard limit acts as a ceiling for the soft limit. For more details please check https://man7.org/linux/man-pages/man2/getrlimit.2.html
[90m[components/gitpod-protocol/go:lib] [0m-	HardLimit float64 `yaml:"hardLimit,omitempty" json:"hardLimit,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// upper limit on the size of the core dump file that will be produced if it receives a core dump signal
[90m[components/gitpod-protocol/go:lib] [0m-	SoftLimit float64 `yaml:"softLimit,omitempty" json:"softLimit,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Env Environment variables to set.
[90m[components/gitpod-protocol/go:lib] [0m-type Env struct {
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Github Configures Gitpod's GitHub app
[90m[components/gitpod-protocol/go:lib] [0m-type Github struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Set to true to enable workspace prebuilds, false to disable them. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuilds interface{} `yaml:"prebuilds,omitempty" json:"prebuilds,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// GitpodConfig
[90m[components/gitpod-protocol/go:lib] [0m-type GitpodConfig struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of additional repositories that are part of this project.
[90m[components/gitpod-protocol/go:lib] [0m-	AdditionalRepositories []*AdditionalRepositoriesItems `yaml:"additionalRepositories,omitempty" json:"additionalRepositories,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the repository should be checked out relative to `/workspace`. Defaults to the simple repository name.
[90m[components/gitpod-protocol/go:lib] [0m-	CheckoutLocation string `yaml:"checkoutLocation,omitempty" json:"checkoutLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure the default action of certain signals is to cause a process to terminate and produce a core dump file, a file containing an image of the process's memory at the time of termination. Disabled by default.
[90m[components/gitpod-protocol/go:lib] [0m-	CoreDump *CoreDump `yaml:"coreDump,omitempty" json:"coreDump,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Experimental network configuration in workspaces (deprecated). Enabled by default
[90m[components/gitpod-protocol/go:lib] [0m-	ExperimentalNetwork bool `yaml:"experimentalNetwork,omitempty" json:"experimentalNetwork,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Git config values should be provided in pairs. E.g. `core.autocrlf: input`. See https://git-scm.com/docs/git-config#_values.
[90m[components/gitpod-protocol/go:lib] [0m-	GitConfig map[string]string `yaml:"gitConfig,omitempty" json:"gitConfig,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configures Gitpod's GitHub app
[90m[components/gitpod-protocol/go:lib] [0m-	Github *Github `yaml:"github,omitempty" json:"github,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The Docker image to run your workspace in.
[90m[components/gitpod-protocol/go:lib] [0m-	Image interface{} `yaml:"image,omitempty" json:"image,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure JetBrains integration
[90m[components/gitpod-protocol/go:lib] [0m-	Jetbrains *Jetbrains `yaml:"jetbrains,omitempty" json:"jetbrains,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The main repository, containing the dev environment configuration.
[90m[components/gitpod-protocol/go:lib] [0m-	MainConfiguration string `yaml:"mainConfiguration,omitempty" json:"mainConfiguration,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of exposed ports.
[90m[components/gitpod-protocol/go:lib] [0m-	Ports []*PortsItems `yaml:"ports,omitempty" json:"ports,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of tasks to run on start. Each task will open a terminal in the IDE.
[90m[components/gitpod-protocol/go:lib] [0m-	Tasks []*TasksItems `yaml:"tasks,omitempty" json:"tasks,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure VS Code integration
[90m[components/gitpod-protocol/go:lib] [0m-	Vscode *Vscode `yaml:"vscode,omitempty" json:"vscode,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Path to where the IDE's workspace should be opened. Supports vscode's `*.code-workspace` files.
[90m[components/gitpod-protocol/go:lib] [0m-	WorkspaceLocation string `yaml:"workspaceLocation,omitempty" json:"workspaceLocation,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Image_object The Docker image to run your workspace in.
[90m[components/gitpod-protocol/go:lib] [0m-type Image_object struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Relative path to the context path (optional). Should only be set if you need to copy files into the image.
[90m[components/gitpod-protocol/go:lib] [0m-	Context string `yaml:"context,omitempty" json:"context,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Relative path to a docker file.
[90m[components/gitpod-protocol/go:lib] [0m-	File string `yaml:"file" json:"file"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Jetbrains Configure JetBrains integration
[90m[components/gitpod-protocol/go:lib] [0m-type Jetbrains struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure CLion integration
[90m[components/gitpod-protocol/go:lib] [0m-	Clion *JetbrainsProduct `yaml:"clion,omitempty" json:"clion,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure GoLand integration
[90m[components/gitpod-protocol/go:lib] [0m-	Goland *JetbrainsProduct `yaml:"goland,omitempty" json:"goland,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure IntelliJ integration
[90m[components/gitpod-protocol/go:lib] [0m-	Intellij *JetbrainsProduct `yaml:"intellij,omitempty" json:"intellij,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure PhpStorm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Phpstorm *JetbrainsProduct `yaml:"phpstorm,omitempty" json:"phpstorm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of plugins which should be installed for all JetBrains product for users of this workspace. From the JetBrains Marketplace page, find a page of the required plugin, select 'Versions' tab, click any version to copy pluginId (short name such as org.rust.lang) of the plugin you want to install.
[90m[components/gitpod-protocol/go:lib] [0m-	Plugins []string `yaml:"plugins,omitempty" json:"plugins,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure PyCharm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Pycharm *JetbrainsProduct `yaml:"pycharm,omitempty" json:"pycharm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure Rider integration
[90m[components/gitpod-protocol/go:lib] [0m-	Rider *JetbrainsProduct `yaml:"rider,omitempty" json:"rider,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure RubyMine integration
[90m[components/gitpod-protocol/go:lib] [0m-	Rubymine *JetbrainsProduct `yaml:"rubymine,omitempty" json:"rubymine,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure WebStorm integration
[90m[components/gitpod-protocol/go:lib] [0m-	Webstorm *JetbrainsProduct `yaml:"webstorm,omitempty" json:"webstorm,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// JetbrainsProduct
[90m[components/gitpod-protocol/go:lib] [0m-type JetbrainsProduct struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of plugins which should be installed for users of this workspace. From the JetBrains Marketplace page, find a page of the required plugin, select 'Versions' tab, click any version to copy pluginId (short name such as org.rust.lang) of the plugin you want to install.
[90m[components/gitpod-protocol/go:lib] [0m-	Plugins []string `yaml:"plugins,omitempty" json:"plugins,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable warming up of JetBrains backend in prebuilds.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuilds *Prebuilds `yaml:"prebuilds,omitempty" json:"prebuilds,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Configure JVM options, for instance '-Xmx=4096m'.
[90m[components/gitpod-protocol/go:lib] [0m-	Vmoptions string `yaml:"vmoptions,omitempty" json:"vmoptions,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// PortsItems
[90m[components/gitpod-protocol/go:lib] [0m-type PortsItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A description to identify what is this port used for.
[90m[components/gitpod-protocol/go:lib] [0m-	Description string `yaml:"description,omitempty" json:"description,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Port name.
[90m[components/gitpod-protocol/go:lib] [0m-	Name string `yaml:"name,omitempty" json:"name,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// What to do when a service on this port was detected. 'notify' (default) will show a notification asking the user what to do. 'open-browser' will open a new browser tab. 'open-preview' will open in the preview on the right of the IDE. 'ignore' will do nothing.
[90m[components/gitpod-protocol/go:lib] [0m-	OnOpen string `yaml:"onOpen,omitempty" json:"onOpen,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The port number (e.g. 1337) or range (e.g. 3000-3999) to expose.
[90m[components/gitpod-protocol/go:lib] [0m-	Port interface{} `yaml:"port" json:"port"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The protocol to be used. (deprecated)
[90m[components/gitpod-protocol/go:lib] [0m-	Protocol string `yaml:"protocol,omitempty" json:"protocol,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Whether the port visibility should be private or public. 'private' (default) will only allow users with workspace access to access the port. 'public' will allow everyone with the port URL to access the port.
[90m[components/gitpod-protocol/go:lib] [0m-	Visibility string `yaml:"visibility,omitempty" json:"visibility,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Prebuilds Enable warming up of JetBrains backend in prebuilds.
[90m[components/gitpod-protocol/go:lib] [0m-type Prebuilds struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Whether only stable, latest or both versions should be warmed up. Default is stable only.
[90m[components/gitpod-protocol/go:lib] [0m-	Version string `yaml:"version,omitempty" json:"version,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Prebuilds_object Set to true to enable workspace prebuilds, false to disable them. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-type Prebuilds_object struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a Review in Gitpod badge to pull requests. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	AddBadge bool `yaml:"addBadge,omitempty" json:"addBadge,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a commit check to pull requests. Set to 'fail-on-error' if you want broken prebuilds to block merging. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	AddCheck interface{} `yaml:"addCheck,omitempty" json:"addCheck,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Add a label to a PR when it's prebuilt. Set to true to use the default label (prebuilt-in-gitpod) or set to a string to use a different label name. This is a beta feature and may be unreliable. Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	AddLabel interface{} `yaml:"addLabel,omitempty" json:"addLabel,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for all branches. Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	Branches bool `yaml:"branches,omitempty" json:"branches,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for the default branch (typically master). Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	Master bool `yaml:"master,omitempty" json:"master,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for pull-requests from the original repo. Defaults to true.
[90m[components/gitpod-protocol/go:lib] [0m-	PullRequests bool `yaml:"pullRequests,omitempty" json:"pullRequests,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Enable prebuilds for pull-requests from any repo (e.g. from forks). Defaults to false.
[90m[components/gitpod-protocol/go:lib] [0m-	PullRequestsFromForks bool `yaml:"pullRequestsFromForks,omitempty" json:"pullRequestsFromForks,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// TasksItems
[90m[components/gitpod-protocol/go:lib] [0m-type TasksItems struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run before `init` and the main `command`. This command is executed on every start and is expected to terminate. If it fails, the following commands will not be executed.
[90m[components/gitpod-protocol/go:lib] [0m-	Before string `yaml:"before,omitempty" json:"before,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The main shell command to run after `before` and `init`. This command is executed last on every start and doesn't have to terminate.
[90m[components/gitpod-protocol/go:lib] [0m-	Command string `yaml:"command,omitempty" json:"command,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Environment variables to set.
[90m[components/gitpod-protocol/go:lib] [0m-	Env *Env `yaml:"env,omitempty" json:"env,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run between `before` and the main `command`. This command is executed only on after initializing a workspace with a fresh clone, but not on restarts and snapshots. This command is expected to terminate. If it fails, the `command` property will not be executed.
[90m[components/gitpod-protocol/go:lib] [0m-	Init string `yaml:"init,omitempty" json:"init,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// Name of the task. Shown on the tab of the opened terminal.
[90m[components/gitpod-protocol/go:lib] [0m-	Name string `yaml:"name,omitempty" json:"name,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The panel/area where to open the terminal. Default is 'bottom' panel.
[90m[components/gitpod-protocol/go:lib] [0m-	OpenIn string `yaml:"openIn,omitempty" json:"openIn,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// The opening mode. Default is 'tab-after'.
[90m[components/gitpod-protocol/go:lib] [0m-	OpenMode string `yaml:"openMode,omitempty" json:"openMode,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// A shell command to run after `before`. This command is executed only on during workspace prebuilds. This command is expected to terminate. If it fails, the workspace build fails.
[90m[components/gitpod-protocol/go:lib] [0m-	Prebuild string `yaml:"prebuild,omitempty" json:"prebuild,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-// Vscode Configure VS Code integration
[90m[components/gitpod-protocol/go:lib] [0m-type Vscode struct {
[90m[components/gitpod-protocol/go:lib] [0m-
[90m[components/gitpod-protocol/go:lib] [0m-	// List of extensions which should be installed for users of this workspace. The identifier of an extension is always '${publisher}.${name}'. For example: 'vscode.csharp'.
[90m[components/gitpod-protocol/go:lib] [0m-	Extensions []string `yaml:"extensions,omitempty" json:"extensions,omitempty"`
[90m[components/gitpod-protocol/go:lib] [0m-}
[90m[components/gitpod-protocol/go:lib] [0m[0;31mpackage build failed[0m
[90m[components/gitpod-protocol/go:lib] [0m[1;37mReason:[0m exit status 1
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:15:45Z" level=fatal msg="build failed"
leeway build components/workspacekit:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib                [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/content-service-api/go:lib   [90m(version 96c22b2ddc7509c580fb952baff56c3a8bfd632d)[0m
[32mðŸ“¦  cached locally[0m  components/workspacekit:fuse-overlayfs  [90m(version 0e3a70acf6c077c42a8c9ddfb56310fea4fce7f6)[0m
[32mðŸ“¦  cached locally[0m  components/ws-daemon-api/go:lib         [90m(version 50668ec3ec5e31f546c2466c6eb5bd5cf37f52c6)[0m
[33mðŸ”§  build[0m           components/workspacekit:app             [90m(version 653c58e1c73e2258980dc9f0142d69ae8446d377)[0m
[33mðŸ”§  build[0m           components/workspacekit:docker          [90m(version 20a5cc190a9c8a10d7857d4426cddc4f1715d408)[0m

[90m[components/workspacekit:app] [0m[33mbuild started[0m [0;90m(version 653c58e1c73e2258980dc9f0142d69ae8446d377)[0m
[90m[components/workspacekit:app] [0mrequires libseccomp > 2.5.0
[90m[components/workspacekit:app] [0m[0;31mpackage build failed[0m
[90m[components/workspacekit:app] [0m[1;37mReason:[0m exit status 1
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:15:47Z" level=fatal msg="build failed"
leeway build components/ws-daemon/seccomp-profile-installer:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/ws-manager:userns-test-fixtures              [90m(version 337c24db94051d44e9040782c9f60c379e6f349e)[0m
[33mðŸ”§  build[0m           components/ws-daemon/seccomp-profile-installer:app      [90m(version efb726b8fedbefe414fd0fcfc32f05397d4bc271)[0m
[33mðŸ”§  build[0m           components/ws-daemon/seccomp-profile-installer:docker   [90m(version 9b323b4e6cb06a541b38e523eaa36316b87d7890)[0m
[33mðŸ”§  build[0m           components/ws-daemon/seccomp-profile-installer:profile  [90m(version 040cdd589642eaa76b010a629245fbfa1f1623e4)[0m

[90m[components/ws-daemon/seccomp-profile-installer:app] [0m[33mbuild started[0m [0;90m(version efb726b8fedbefe414fd0fcfc32f05397d4bc271)[0m
[90m[components/ws-daemon/seccomp-profile-installer:app] [0mlevel=error msg="[linters_context] typechecking error: pattern ./...: directory prefix . does not contain main module or its selected dependencies"
[90m[components/ws-daemon/seccomp-profile-installer:app] [0m[0;31mpackage build failed[0m
[90m[components/ws-daemon/seccomp-profile-installer:app] [0m[1;37mReason:[0m exit status 7
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:15:50Z" level=fatal msg="build failed"
leeway build components/ws-daemon:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib                  [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/content-service-api/go:lib     [90m(version 96c22b2ddc7509c580fb952baff56c3a8bfd632d)[0m
[32mðŸ“¦  cached locally[0m  components/content-service:lib            [90m(version b0cd0898613468d7c336a07949eab1a254208889)[0m
[32mðŸ“¦  cached locally[0m  components/ws-daemon-api/go:lib           [90m(version 50668ec3ec5e31f546c2466c6eb5bd5cf37f52c6)[0m
[32mðŸ“¦  cached locally[0m  components/ws-daemon/nsinsider:app        [90m(version d12268fa1f748b5cbc2389c20384fddfc8311db1)[0m
[32mðŸ“¦  cached locally[0m  components/ws-daemon:app                  [90m(version 12a1474cd62990545c235c3808be17329d6230f1)[0m
[32mðŸ“¦  cached locally[0m  components/ws-daemon:content-initializer  [90m(version c806f7cb10365aebe6a71178c51ef5a431a8ce26)[0m
[32mðŸ“¦  cached locally[0m  components/ws-daemon:docker               [90m(version 17c422dc67630f3a475daa21b4d3c73f67b8ca76)[0m
[32mðŸ“¦  cached locally[0m  components/ws-manager-api/go:lib          [90m(version d89281deca1e97571505c1d2d858062eab5c5d01)[0m


[0;32mbuild succeded[0m
leeway build components/ws-manager-bridge:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/content-service-api/typescript:lib    [90m(version c71a29d0b6ae107f0aab9d73f018d87f6b7b8582)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-db:lib                         [90m(version 38d74d9aef02665fba03036289a3b12c241d21dd)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-messagebus:lib                 [90m(version c7668ac9d5b02ee05bd39f17054bba4dcbfdb780)[0m
[32mðŸ“¦  cached locally[0m  components/gitpod-protocol:lib                   [90m(version 6f50f84f6d574c1dae5f44fabf7fd3a6af9537d1)[0m
[32mðŸ“¦  cached locally[0m  components/ws-daemon-api/typescript:lib          [90m(version 45773cbd3b66077d489736c0b7ad4ba41905f3d9)[0m
[32mðŸ“¦  cached locally[0m  components/ws-manager-api/typescript:lib         [90m(version 3c407f78de6991d3fccfb6af70eb6bfda0bef644)[0m
[32mðŸ“¦  cached locally[0m  components/ws-manager-bridge-api/typescript:lib  [90m(version 9ec71ad36e08048edfa0b703cae362816d1dc962)[0m
[32mðŸ“¦  cached locally[0m  components/ws-manager-bridge:app                 [90m(version a6241738c536d6e300ed6202db55ca130203795d)[0m
[32mðŸ“¦  cached locally[0m  components/ws-manager-bridge:docker              [90m(version 3aa203c48c68fac2b5c8c0689fc34422b5548500)[0m


[0;32mbuild succeded[0m
leeway build components/ws-manager-mk2:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib               [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/content-service-api/go:lib  [90m(version 96c22b2ddc7509c580fb952baff56c3a8bfd632d)[0m
[32mðŸ“¦  cached locally[0m  components/content-service:lib         [90m(version b0cd0898613468d7c336a07949eab1a254208889)[0m
[32mðŸ“¦  cached locally[0m  components/image-builder-api/go:lib    [90m(version f569f4c7ed2550ed9c4c7109c92f4e1ee0768739)[0m
[32mðŸ“¦  cached locally[0m  components/registry-facade-api/go:lib  [90m(version 11d9730b48b27fad322e28b6a16b495e98e43527)[0m
[32mðŸ“¦  cached locally[0m  components/ws-manager-api/go:lib       [90m(version d89281deca1e97571505c1d2d858062eab5c5d01)[0m
[33mðŸ”§  build[0m           components/ws-manager-mk2:app          [90m(version a585bcc22377fd5be2995593772a65a6de15a0b0)[0m
[33mðŸ”§  build[0m           components/ws-manager-mk2:docker       [90m(version e1c52725b30403dc682de29836decb589cbcadcd)[0m

[90m[components/ws-manager-mk2:app] [0m[33mbuild started[0m [0;90m(version a585bcc22377fd5be2995593772a65a6de15a0b0)[0m
[90m[components/ws-manager-mk2:app] [0m?   	github.com/gitpod-io/gitpod/ws-manager-mk2	[no test files]
[90m[components/ws-manager-mk2:app] [0m?   	github.com/gitpod-io/gitpod/ws-manager-mk2/cmd/sample-workspace	[no test files]
[90m[components/ws-manager-mk2:app] [0m?   	github.com/gitpod-io/gitpod/ws-manager-mk2/pkg/activity	[no test files]
[90m[components/ws-manager-mk2:app] [0m?   	github.com/gitpod-io/gitpod/ws-manager-mk2/pkg/maintenance	[no test files]
[90m[components/ws-manager-mk2:app] [0m?   	github.com/gitpod-io/gitpod/ws-manager-mk2/pkg/proxy	[no test files]
[90m[components/ws-manager-mk2:app] [0m?   	github.com/gitpod-io/gitpod/ws-manager-mk2/service	[no test files]
[90m[components/ws-manager-mk2:app] [0m=== RUN   TestAPIs
[90m[components/ws-manager-mk2:app] [0mRunning Suite: Controller Suite - /tmp/build/components-ws-manager-mk2--app.a585bcc22377fd5be2995593772a65a6de15a0b0/controllers
[90m[components/ws-manager-mk2:app] [0m================================================================================================================================
[90m[components/ws-manager-mk2:app] [0mRandom Seed: [1m1683857763[0m
[90m[components/ws-manager-mk2:app] [0m
[90m[components/ws-manager-mk2:app] [0mWill run [1m23[0m of [1m23[0m specs
[90m[components/ws-manager-mk2:app] [0m[38;5;243m------------------------------[0m
[90m[components/ws-manager-mk2:app] [0m[38;5;9m[BeforeSuite] [FAILED] [0.007 seconds][0m
[90m[components/ws-manager-mk2:app] [0m[38;5;9m[1m[BeforeSuite] [0m
[90m[components/ws-manager-mk2:app] [0m[38;5;243m/tmp/build/components-ws-manager-mk2--app.a585bcc22377fd5be2995593772a65a6de15a0b0/controllers/suite_test.go:59[0m
[90m[components/ws-manager-mk2:app] [0m
[90m[components/ws-manager-mk2:app] [0m  [38;5;243mTimeline >>[0m
[90m[components/ws-manager-mk2:app] [0m  [1mSTEP:[0m bootstrapping test environment [38;5;243m@ 05/12/23 02:16:03.631[0m
[90m[components/ws-manager-mk2:app] [0m  2023-05-12T02:16:03Z	DEBUG	controller-runtime.test-env	starting control plane
[90m[components/ws-manager-mk2:app] [0m  2023-05-12T02:16:03Z	ERROR	controller-runtime.test-env	unable to start the controlplane	{"tries": 0, "error": "fork/exec /usr/local/kubebuilder/bin/etcd: no such file or directory"}
[90m[components/ws-manager-mk2:app] [0m  sigs.k8s.io/controller-runtime/pkg/envtest.(*Environment).startControlPlane
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/sigs.k8s.io/controller-runtime@v0.14.6/pkg/envtest/server.go:329
[90m[components/ws-manager-mk2:app] [0m  sigs.k8s.io/controller-runtime/pkg/envtest.(*Environment).Start
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/sigs.k8s.io/controller-runtime@v0.14.6/pkg/envtest/server.go:259
[90m[components/ws-manager-mk2:app] [0m  github.com/gitpod-io/gitpod/ws-manager-mk2/controllers.glob..func1
[90m[components/ws-manager-mk2:app] [0m  	/tmp/build/components-ws-manager-mk2--app.a585bcc22377fd5be2995593772a65a6de15a0b0/controllers/suite_test.go:70
[90m[components/ws-manager-mk2:app] [0m  github.com/onsi/ginkgo/v2/internal.extractBodyFunction.func3
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.8.0/internal/node.go:463
[90m[components/ws-manager-mk2:app] [0m  github.com/onsi/ginkgo/v2/internal.(*Suite).runNode.func3
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.8.0/internal/suite.go:854
[90m[components/ws-manager-mk2:app] [0m  2023-05-12T02:16:03Z	ERROR	controller-runtime.test-env	unable to start the controlplane	{"tries": 1, "error": "fork/exec /usr/local/kubebuilder/bin/etcd: no such file or directory"}
[90m[components/ws-manager-mk2:app] [0m  sigs.k8s.io/controller-runtime/pkg/envtest.(*Environment).startControlPlane
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/sigs.k8s.io/controller-runtime@v0.14.6/pkg/envtest/server.go:329
[90m[components/ws-manager-mk2:app] [0m  sigs.k8s.io/controller-runtime/pkg/envtest.(*Environment).Start
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/sigs.k8s.io/controller-runtime@v0.14.6/pkg/envtest/server.go:259
[90m[components/ws-manager-mk2:app] [0m  github.com/gitpod-io/gitpod/ws-manager-mk2/controllers.glob..func1
[90m[components/ws-manager-mk2:app] [0m  	/tmp/build/components-ws-manager-mk2--app.a585bcc22377fd5be2995593772a65a6de15a0b0/controllers/suite_test.go:70
[90m[components/ws-manager-mk2:app] [0m  github.com/onsi/ginkgo/v2/internal.extractBodyFunction.func3
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.8.0/internal/node.go:463
[90m[components/ws-manager-mk2:app] [0m  github.com/onsi/ginkgo/v2/internal.(*Suite).runNode.func3
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.8.0/internal/suite.go:854
[90m[components/ws-manager-mk2:app] [0m  2023-05-12T02:16:03Z	ERROR	controller-runtime.test-env	unable to start the controlplane	{"tries": 2, "error": "fork/exec /usr/local/kubebuilder/bin/etcd: no such file or directory"}
[90m[components/ws-manager-mk2:app] [0m  sigs.k8s.io/controller-runtime/pkg/envtest.(*Environment).startControlPlane
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/sigs.k8s.io/controller-runtime@v0.14.6/pkg/envtest/server.go:329
[90m[components/ws-manager-mk2:app] [0m  sigs.k8s.io/controller-runtime/pkg/envtest.(*Environment).Start
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/sigs.k8s.io/controller-runtime@v0.14.6/pkg/envtest/server.go:259
[90m[components/ws-manager-mk2:app] [0m  github.com/gitpod-io/gitpod/ws-manager-mk2/controllers.glob..func1
[90m[components/ws-manager-mk2:app] [0m  	/tmp/build/components-ws-manager-mk2--app.a585bcc22377fd5be2995593772a65a6de15a0b0/controllers/suite_test.go:70
[90m[components/ws-manager-mk2:app] [0m  github.com/onsi/ginkgo/v2/internal.extractBodyFunction.func3
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.8.0/internal/node.go:463
[90m[components/ws-manager-mk2:app] [0m  github.com/onsi/ginkgo/v2/internal.(*Suite).runNode.func3
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.8.0/internal/suite.go:854
[90m[components/ws-manager-mk2:app] [0m  2023-05-12T02:16:03Z	ERROR	controller-runtime.test-env	unable to start the controlplane	{"tries": 3, "error": "fork/exec /usr/local/kubebuilder/bin/etcd: no such file or directory"}
[90m[components/ws-manager-mk2:app] [0m  sigs.k8s.io/controller-runtime/pkg/envtest.(*Environment).startControlPlane
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/sigs.k8s.io/controller-runtime@v0.14.6/pkg/envtest/server.go:329
[90m[components/ws-manager-mk2:app] [0m  sigs.k8s.io/controller-runtime/pkg/envtest.(*Environment).Start
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/sigs.k8s.io/controller-runtime@v0.14.6/pkg/envtest/server.go:259
[90m[components/ws-manager-mk2:app] [0m  github.com/gitpod-io/gitpod/ws-manager-mk2/controllers.glob..func1
[90m[components/ws-manager-mk2:app] [0m  	/tmp/build/components-ws-manager-mk2--app.a585bcc22377fd5be2995593772a65a6de15a0b0/controllers/suite_test.go:70
[90m[components/ws-manager-mk2:app] [0m  github.com/onsi/ginkgo/v2/internal.extractBodyFunction.func3
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.8.0/internal/node.go:463
[90m[components/ws-manager-mk2:app] [0m  github.com/onsi/ginkgo/v2/internal.(*Suite).runNode.func3
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.8.0/internal/suite.go:854
[90m[components/ws-manager-mk2:app] [0m  2023-05-12T02:16:03Z	ERROR	controller-runtime.test-env	unable to start the controlplane	{"tries": 4, "error": "fork/exec /usr/local/kubebuilder/bin/etcd: no such file or directory"}
[90m[components/ws-manager-mk2:app] [0m  sigs.k8s.io/controller-runtime/pkg/envtest.(*Environment).startControlPlane
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/sigs.k8s.io/controller-runtime@v0.14.6/pkg/envtest/server.go:329
[90m[components/ws-manager-mk2:app] [0m  sigs.k8s.io/controller-runtime/pkg/envtest.(*Environment).Start
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/sigs.k8s.io/controller-runtime@v0.14.6/pkg/envtest/server.go:259
[90m[components/ws-manager-mk2:app] [0m  github.com/gitpod-io/gitpod/ws-manager-mk2/controllers.glob..func1
[90m[components/ws-manager-mk2:app] [0m  	/tmp/build/components-ws-manager-mk2--app.a585bcc22377fd5be2995593772a65a6de15a0b0/controllers/suite_test.go:70
[90m[components/ws-manager-mk2:app] [0m  github.com/onsi/ginkgo/v2/internal.extractBodyFunction.func3
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.8.0/internal/node.go:463
[90m[components/ws-manager-mk2:app] [0m  github.com/onsi/ginkgo/v2/internal.(*Suite).runNode.func3
[90m[components/ws-manager-mk2:app] [0m  	/root/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.8.0/internal/suite.go:854
[90m[components/ws-manager-mk2:app] [0m  [38;5;9m[FAILED][0m in [BeforeSuite] - /tmp/build/components-ws-manager-mk2--app.a585bcc22377fd5be2995593772a65a6de15a0b0/controllers/suite_test.go:71 [38;5;243m@ 05/12/23 02:16:03.637[0m
[90m[components/ws-manager-mk2:app] [0m  [38;5;243m<< Timeline[0m
[90m[components/ws-manager-mk2:app] [0m
[90m[components/ws-manager-mk2:app] [0m  [38;5;9m[FAILED] Unexpected error:
[90m[components/ws-manager-mk2:app] [0m      <*fmt.wrapError | 0xc0003ee5a0>: {
[90m[components/ws-manager-mk2:app] [0m          msg: "unable to start control plane itself: failed to start the controlplane. retried 5 times: fork/exec /usr/local/kubebuilder/bin/etcd: no such file or directory",
[90m[components/ws-manager-mk2:app] [0m          err: <*fmt.wrapError | 0xc0003ee520>{
[90m[components/ws-manager-mk2:app] [0m              msg: "failed to start the controlplane. retried 5 times: fork/exec /usr/local/kubebuilder/bin/etcd: no such file or directory",
[90m[components/ws-manager-mk2:app] [0m              err: <*fs.PathError | 0xc00043d4d0>{
[90m[components/ws-manager-mk2:app] [0m                  Op: "fork/exec",
[90m[components/ws-manager-mk2:app] [0m                  Path: "/usr/local/kubebuilder/bin/etcd",
[90m[components/ws-manager-mk2:app] [0m                  Err: <syscall.Errno>0x2,
[90m[components/ws-manager-mk2:app] [0m              },
[90m[components/ws-manager-mk2:app] [0m          },
[90m[components/ws-manager-mk2:app] [0m      }
[90m[components/ws-manager-mk2:app] [0m      unable to start control plane itself: failed to start the controlplane. retried 5 times: fork/exec /usr/local/kubebuilder/bin/etcd: no such file or directory
[90m[components/ws-manager-mk2:app] [0m  occurred[0m
[90m[components/ws-manager-mk2:app] [0m  [38;5;9mIn [1m[BeforeSuite][0m[38;5;9m at: [1m/tmp/build/components-ws-manager-mk2--app.a585bcc22377fd5be2995593772a65a6de15a0b0/controllers/suite_test.go:71[0m [38;5;243m@ 05/12/23 02:16:03.637[0m
[90m[components/ws-manager-mk2:app] [0m[38;5;243m------------------------------[0m
[90m[components/ws-manager-mk2:app] [0m[38;5;13m[AfterSuite] [PANICKED] [0.000 seconds][0m
[90m[components/ws-manager-mk2:app] [0m[38;5;13m[1m[AfterSuite] [0m
[90m[components/ws-manager-mk2:app] [0m[38;5;243m/tmp/build/components-ws-manager-mk2--app.a585bcc22377fd5be2995593772a65a6de15a0b0/controllers/suite_test.go:178[0m
[90m[components/ws-manager-mk2:app] [0m
[90m[components/ws-manager-mk2:app] [0m  [38;5;13m[PANICKED] Test Panicked[0m
[90m[components/ws-manager-mk2:app] [0m  [38;5;13mIn [1m[AfterSuite][0m[38;5;13m at: [1m/snap/go/current/src/runtime/panic.go:260[0m [38;5;243m@ 05/12/23 02:16:03.637[0m
[90m[components/ws-manager-mk2:app] [0m
[90m[components/ws-manager-mk2:app] [0m  [38;5;13mruntime error: invalid memory address or nil pointer dereference[0m
[90m[components/ws-manager-mk2:app] [0m
[90m[components/ws-manager-mk2:app] [0m  [38;5;13mFull Stack Trace[0m
[90m[components/ws-manager-mk2:app] [0m    github.com/gitpod-io/gitpod/ws-manager-mk2/controllers.glob..func2()
[90m[components/ws-manager-mk2:app] [0m    	/tmp/build/components-ws-manager-mk2--app.a585bcc22377fd5be2995593772a65a6de15a0b0/controllers/suite_test.go:179 +0x1b
[90m[components/ws-manager-mk2:app] [0m[38;5;243m------------------------------[0m
[90m[components/ws-manager-mk2:app] [0m
[90m[components/ws-manager-mk2:app] [0m[38;5;9m[1mSummarizing 2 Failures:[0m
[90m[components/ws-manager-mk2:app] [0m  [38;5;9m[FAIL][0m [38;5;9m[1m[BeforeSuite] [0m
[90m[components/ws-manager-mk2:app] [0m  [38;5;243m/tmp/build/components-ws-manager-mk2--app.a585bcc22377fd5be2995593772a65a6de15a0b0/controllers/suite_test.go:71[0m
[90m[components/ws-manager-mk2:app] [0m  [38;5;13m[PANICKED!][0m [38;5;13m[1m[AfterSuite] [0m
[90m[components/ws-manager-mk2:app] [0m  [38;5;243m/snap/go/current/src/runtime/panic.go:260[0m
[90m[components/ws-manager-mk2:app] [0m
[90m[components/ws-manager-mk2:app] [0m[38;5;9m[1mRan 0 of 23 Specs in 0.007 seconds[0m
[90m[components/ws-manager-mk2:app] [0m[38;5;9m[1mFAIL![0m -- [38;5;14m[1mA BeforeSuite node failed so all tests were skipped.[0m
[90m[components/ws-manager-mk2:app] [0m--- FAIL: TestAPIs (0.01s)
[90m[components/ws-manager-mk2:app] [0mFAIL
[90m[components/ws-manager-mk2:app] [0mFAIL	github.com/gitpod-io/gitpod/ws-manager-mk2/controllers	0.044s
[90m[components/ws-manager-mk2:app] [0m=== RUN   TestFirstGet
[90m[components/ws-manager-mk2:app] [0m--- PASS: TestFirstGet (0.00s)
[90m[components/ws-manager-mk2:app] [0m=== RUN   TestGetShutDown
[90m[components/ws-manager-mk2:app] [0m--- PASS: TestGetShutDown (0.00s)
[90m[components/ws-manager-mk2:app] [0m=== RUN   TestClosed
[90m[components/ws-manager-mk2:app] [0m--- PASS: TestClosed (0.00s)
[90m[components/ws-manager-mk2:app] [0m=== RUN   TestValidateConnections
[90m[components/ws-manager-mk2:app] [0m--- PASS: TestValidateConnections (0.00s)
[90m[components/ws-manager-mk2:app] [0mPASS
[90m[components/ws-manager-mk2:app] [0mok  	github.com/gitpod-io/gitpod/ws-manager-mk2/grpcpool	(cached)
[90m[components/ws-manager-mk2:app] [0mFAIL
[90m[components/ws-manager-mk2:app] [0m[0;31mpackage build failed[0m
[90m[components/ws-manager-mk2:app] [0m[1;37mReason:[0m exit status 1
[0;31mbuild failed[0m
[1;37mReason:[0m build failed
time="2023-05-12T02:16:03Z" level=fatal msg="build failed"
leeway build components/ws-manager:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib               [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/content-service-api/go:lib  [90m(version 96c22b2ddc7509c580fb952baff56c3a8bfd632d)[0m
[32mðŸ“¦  cached locally[0m  components/content-service:lib         [90m(version b0cd0898613468d7c336a07949eab1a254208889)[0m
[32mðŸ“¦  cached locally[0m  components/image-builder-api/go:lib    [90m(version f569f4c7ed2550ed9c4c7109c92f4e1ee0768739)[0m
[32mðŸ“¦  cached locally[0m  components/registry-facade-api/go:lib  [90m(version 11d9730b48b27fad322e28b6a16b495e98e43527)[0m
[32mðŸ“¦  cached locally[0m  components/ws-daemon-api/go:lib        [90m(version 50668ec3ec5e31f546c2466c6eb5bd5cf37f52c6)[0m
[32mðŸ“¦  cached locally[0m  components/ws-manager-api/go:lib       [90m(version d89281deca1e97571505c1d2d858062eab5c5d01)[0m
[32mðŸ“¦  cached locally[0m  components/ws-manager:app              [90m(version 83418f4921a84792a474cfa3c1f75f73e2513bc6)[0m
[32mðŸ“¦  cached locally[0m  components/ws-manager:docker           [90m(version 48c678786153c9829a606e692827f0a905c8feb3)[0m


[0;32mbuild succeded[0m
leeway build components/ws-proxy:docker -Dversion=20230512
[32mðŸ“¦  cached locally[0m  components/common-go:lib               [90m(version d2afc756bfcf06513bbc04430c1cffbe52f340fe)[0m
[32mðŸ“¦  cached locally[0m  components/content-service-api/go:lib  [90m(version 96c22b2ddc7509c580fb952baff56c3a8bfd632d)[0m
[32mðŸ“¦  cached locally[0m  components/content-service:lib         [90m(version b0cd0898613468d7c336a07949eab1a254208889)[0m
[32mðŸ“¦  cached locally[0m  components/registry-facade-api/go:lib  [90m(version 11d9730b48b27fad322e28b6a16b495e98e43527)[0m
[32mðŸ“¦  cached locally[0m  components/supervisor-api/go:lib       [90m(version 6505b1a01e6e7b434713f4944dcab84b18d89b56)[0m
[32mðŸ“¦  cached locally[0m  components/ws-manager-api/go:lib       [90m(version d89281deca1e97571505c1d2d858062eab5c5d01)[0m
[32mðŸ“¦  cached locally[0m  components/ws-proxy:app                [90m(version c8f4bc5cbbab18d1e584cf5d292c8416f415e811)[0m
[32mðŸ“¦  cached locally[0m  components/ws-proxy:docker             [90m(version 6ec35aef52c54230b12e5655cd9d4427f3bf518b)[0m


[0;32mbuild succeded[0m
